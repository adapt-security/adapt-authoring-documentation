{
  "openapi": "3.0.3",
  "info": {
    "version": "1.0.0-rc.4"
  },
  "components": {
    "schemas": {
      "base": {
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "$anchor": "base",
        "description": "The base schema inherited by all other schemas",
        "type": "object",
        "properties": {
          "_id": {
            "description": "Unique identifier",
            "type": "string",
            "isObjectId": true
          }
        }
      },
      "tag": {
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "$anchor": "tag",
        "description": "Tag metadata applied to other objects",
        "type": "object",
        "properties": {
          "_id": {
            "description": "Unique identifier",
            "type": "string",
            "isObjectId": true
          },
          "title": {
            "description": "The tag title",
            "type": "string"
          }
        },
        "required": [
          "title"
        ]
      },
      "authuser": {
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "$anchor": "authuser",
        "description": "Extra user properties related to auth",
        "type": "object",
        "properties": {
          "_id": {
            "description": "Unique identifier",
            "type": "string",
            "isObjectId": true
          }
        },
        "required": [
          "authType"
        ]
      },
      "authtoken": {
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "$anchor": "authtoken",
        "description": "An authorisation token",
        "type": "object",
        "properties": {
          "_id": {
            "description": "Unique identifier",
            "type": "string",
            "isObjectId": true
          }
        },
        "required": [
          "signature",
          "userId",
          "createdAt",
          "authType"
        ]
      },
      "userroles": {
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "$anchor": "userroles",
        "description": "Extra user properties for specifying roles",
        "type": "object",
        "properties": {
          "_id": {
            "description": "Unique identifier",
            "type": "string",
            "isObjectId": true
          },
          "roles": {
            "description": "Roles assigned to this user",
            "type": "array",
            "items": {
              "type": "string",
              "isObjectId": true
            },
            "default": []
          }
        }
      },
      "maildata": {
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "$anchor": "maildata",
        "description": "Email data",
        "type": "object",
        "properties": {
          "_id": {
            "description": "Unique identifier",
            "type": "string",
            "isObjectId": true
          },
          "to": {
            "description": "Recipient email address",
            "type": "string",
            "format": "email"
          },
          "from": {
            "description": "Sender email address",
            "type": "string",
            "format": "email"
          },
          "subject": {
            "description": "Email subject",
            "type": "string"
          },
          "text": {
            "description": "Email text content",
            "type": "string"
          },
          "html": {
            "description": "Email HTML content",
            "type": "string"
          }
        },
        "required": [
          "to",
          "from",
          "subject",
          "text"
        ]
      },
      "template": {
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "$anchor": "template",
        "description": "Just a template",
        "type": "object",
        "properties": {
          "_id": {
            "description": "Unique identifier",
            "type": "string",
            "isObjectId": true
          },
          "mandatoryField": {
            "description": "This field is included in required, so is mandatory",
            "type": "string"
          },
          "optionalField": {
            "description": "This field is not included in required, so is optional",
            "type": "number",
            "default": 1
          }
        },
        "required": [
          "requiredField"
        ]
      },
      "localpassword": {
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "$anchor": "localpassword",
        "description": "Local authentication password",
        "type": "object",
        "properties": {
          "_id": {
            "description": "Unique identifier",
            "type": "string",
            "isObjectId": true
          },
          "password": {
            "description": "Password value",
            "type": "string",
            "password": "password"
          }
        },
        "required": [
          "password"
        ]
      },
      "coursethemepreset": {
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "$anchor": "coursethemepreset",
        "description": "A reusable collection of theme settings",
        "type": "object",
        "properties": {
          "_id": {
            "description": "Unique identifier",
            "type": "string",
            "isObjectId": true
          },
          "displayName": {
            "description": "User-friendly name for the settings",
            "type": "string"
          },
          "parentTheme": {
            "description": "Name of the theme these settings should be applied to",
            "type": "string"
          },
          "properties": {
            "description": "The theme settings",
            "type": "object"
          }
        },
        "required": [
          "displayName",
          "parentTheme"
        ]
      },
      "courseasset": {
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "$anchor": "courseasset",
        "description": "Metadata related to where an asset is used in a course",
        "type": "object",
        "properties": {
          "_id": {
            "description": "Unique identifier",
            "type": "string",
            "isObjectId": true
          },
          "courseId": {
            "description": "Course record unique ID",
            "type": "string",
            "isObjectId": true
          },
          "contentId": {
            "description": "The ID for the content record that uses this asset",
            "type": "string",
            "isObjectId": true
          },
          "assetId": {
            "description": "Asset record unique ID",
            "type": "string",
            "isObjectId": true
          }
        },
        "required": [
          "courseId",
          "contentId",
          "assetId"
        ]
      },
      "log": {
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "$anchor": "log",
        "description": "A system log message",
        "type": "object",
        "properties": {
          "_id": {
            "description": "Unique identifier",
            "type": "string",
            "isObjectId": true
          },
          "level": {
            "description": "The priority level of the log message",
            "type": "string",
            "enum": [
              "debug",
              "info",
              "success",
              "warn",
              "error",
              "fatal"
            ]
          },
          "module": {
            "description": "Module responsible for creating the log",
            "type": "string"
          },
          "timestamp": {
            "description": "Time log was created",
            "type": "string",
            "format": "date-time",
            "isDate": true
          },
          "data": {
            "description": "The data to be logged",
            "type": "array"
          }
        },
        "required": [
          "level"
        ]
      },
      "adaptbuild": {
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "$anchor": "adaptbuild",
        "description": "An Adapt course build instance",
        "type": "object",
        "properties": {
          "_id": {
            "description": "Unique identifier",
            "type": "string",
            "isObjectId": true
          },
          "action": {
            "description": "The course _id",
            "type": "string"
          },
          "courseId": {
            "description": "The course _id",
            "type": "string"
          },
          "location": {
            "description": "Location of the course preview",
            "type": "string"
          },
          "expiresAt": {
            "description": "When the preview should be purged from the server",
            "type": "string",
            "format": "date-time",
            "isDate": true
          },
          "createdBy": {
            "description": "User which initiated the build",
            "type": "string",
            "isObjectId": true
          },
          "versions": {
            "description": "Versions of framework and plugins used in the build",
            "type": "object"
          }
        },
        "required": [
          "action",
          "courseId",
          "location",
          "expiresAt",
          "createdBy"
        ]
      },
      "tags": {
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "$anchor": "tags",
        "description": "Extra properties to define tags",
        "type": "object",
        "properties": {
          "_id": {
            "description": "Unique identifier",
            "type": "string",
            "isObjectId": true
          },
          "tags": {
            "title": "Tags",
            "description": "Add tags by entering one or more words, separated with a comma (,)",
            "type": "array",
            "default": [],
            "uniqueItems": true,
            "items": {
              "type": "string",
              "isObjectId": true
            },
            "_backboneForms": "Tags"
          }
        }
      },
      "role": {
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "$anchor": "role",
        "description": "A user role",
        "type": "object",
        "properties": {
          "_id": {
            "description": "Unique identifier",
            "type": "string",
            "isObjectId": true
          },
          "shortName": {
            "description": "Short name for the role",
            "type": "string"
          },
          "displayName": {
            "description": "Human-readable representation of the role",
            "type": "string"
          },
          "extends": {
            "description": "The parent role that this role should inherit scopes from",
            "type": "string"
          },
          "scopes": {
            "description": "Scopes relevant to this role",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "shortName",
          "displayName",
          "scopes"
        ]
      },
      "asset": {
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "$anchor": "asset",
        "description": "Asset metadata",
        "type": "object",
        "properties": {
          "_id": {
            "description": "Unique identifier",
            "type": "string",
            "isObjectId": true
          },
          "description": {
            "title": "Description",
            "description": "The asset description",
            "type": "string"
          },
          "title": {
            "title": "Title",
            "description": "The asset title",
            "type": "string"
          },
          "url": {
            "title": "URL",
            "description": "If using an external asset, this should be the URL to the asset",
            "type": "string",
            "format": "uri"
          },
          "createdAt": {
            "description": "Date that the data was created",
            "type": "string",
            "format": "date-time",
            "isDate": true
          },
          "createdBy": {
            "description": "Author of the data",
            "type": "string",
            "isObjectId": true
          },
          "updatedAt": {
            "description": "Date that the data was last modified",
            "type": "string",
            "format": "date-time",
            "isDate": true
          },
          "tags": {
            "title": "Tags",
            "description": "Add tags by entering one or more words, separated with a comma (,)",
            "type": "array",
            "default": [],
            "uniqueItems": true,
            "items": {
              "type": "string",
              "isObjectId": true
            },
            "_backboneForms": "Tags"
          }
        },
        "required": [
          "title",
          "description",
          "createdAt",
          "createdBy",
          "updatedAt"
        ]
      },
      "authored": {
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "$anchor": "authored",
        "description": "Adds properties relating to authoring",
        "type": "object",
        "properties": {
          "_id": {
            "description": "Unique identifier",
            "type": "string",
            "isObjectId": true
          },
          "createdAt": {
            "description": "Date that the data was created",
            "type": "string",
            "format": "date-time",
            "isDate": true
          },
          "createdBy": {
            "description": "Author of the data",
            "type": "string",
            "isObjectId": true
          },
          "updatedAt": {
            "description": "Date that the data was last modified",
            "type": "string",
            "format": "date-time",
            "isDate": true
          }
        },
        "required": [
          "createdAt",
          "createdBy",
          "updatedAt"
        ]
      },
      "contentplugin": {
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "$anchor": "contentplugin",
        "description": "An Adapt framework plugin",
        "type": "object",
        "properties": {
          "_id": {
            "description": "Unique identifier",
            "type": "string",
            "isObjectId": true
          },
          "name": {
            "description": "Unique name for the plugin",
            "type": "string"
          },
          "displayName": {
            "description": "User-friendly name for the plugin",
            "type": "string"
          },
          "version": {
            "description": "Version number for the plugin",
            "type": "string"
          },
          "framework": {
            "description": "",
            "type": "string"
          },
          "isLocalInstall": {
            "description": "Whether the plugin has been installed locally (as opposed to with the CLI)",
            "type": "boolean"
          },
          "isEnabled": {
            "description": "",
            "type": "boolean",
            "default": true
          },
          "type": {
            "description": "",
            "type": "string"
          },
          "targetAttribute": {
            "description": "",
            "type": "string"
          },
          "description": {
            "description": "",
            "type": "string"
          },
          "pluginDependencies": {
            "description": "",
            "type": "object"
          },
          "isAddedByDefault": {
            "description": "Whether the plugin should be added by default for new courses",
            "type": "boolean",
            "default": false
          }
        },
        "required": [
          "framework",
          "name",
          "type",
          "version",
          "isLocalInstall"
        ]
      },
      "defaultplugins": {
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "$anchor": "defaultplugins",
        "description": "Defines whether plugins should be added as default",
        "type": "object",
        "properties": {
          "_id": {
            "description": "Unique identifier",
            "type": "string",
            "isObjectId": true
          },
          "isAddedByDefault": {
            "description": "Whether the plugin should be added by default for new courses",
            "type": "boolean",
            "default": false
          }
        }
      },
      "user": {
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "$anchor": "user",
        "description": "A system user",
        "type": "object",
        "properties": {
          "_id": {
            "description": "Unique identifier",
            "type": "string",
            "isObjectId": true
          },
          "email": {
            "description": "Email address for the user",
            "type": "string",
            "format": "email"
          },
          "firstName": {
            "description": "First name of the user",
            "type": "string",
            "default": "Adapt"
          },
          "lastName": {
            "description": "Last name of the user",
            "type": "string",
            "default": "User"
          },
          "roles": {
            "description": "Roles assigned to this user",
            "type": "array",
            "items": {
              "type": "string",
              "isObjectId": true
            },
            "default": []
          }
        },
        "required": [
          "email",
          "authType"
        ]
      },
      "config": {
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "$anchor": "config",
        "description": "The base schema inherited by all other schemas",
        "type": "object",
        "properties": {
          "_id": {
            "description": "Unique identifier",
            "type": "string",
            "isObjectId": true
          },
          "_type": {
            "type": "string",
            "title": "Type",
            "default": "config"
          },
          "_extensions": {
            "type": "object",
            "title": "Extensions",
            "default": {}
          },
          "_enabledPlugins": {
            "type": "array",
            "title": "Enabled plugins",
            "default": []
          },
          "_theme": {
            "type": "string",
            "title": "Theme",
            "default": "adapt-contrib-vanilla"
          },
          "_menu": {
            "type": "string",
            "title": "Menu",
            "default": "adapt-contrib-boxMenu"
          },
          "_courseId": {
            "type": "string",
            "isObjectId": true,
            "title": "Course id"
          },
          "_completionCriteria": {
            "type": "object",
            "title": "Completion criteria",
            "default": {},
            "properties": {
              "_requireContentCompleted": {
                "type": "boolean",
                "title": "Require all course content to be completed",
                "default": true
              },
              "_requireAssessmentCompleted": {
                "type": "boolean",
                "title": "Require all assessments to be completed",
                "default": false
              },
              "_submitOnEveryAssessmentAttempt": {
                "type": "boolean",
                "title": "Submit completion on every assessment attempt",
                "description": "If enabled and the course completion criteria is met, the completion status will be reported every time the assessment is completed (regardless of whether the user passes or fails)",
                "default": false
              },
              "_shouldSubmitScore": {
                "type": "boolean",
                "title": "Submit score to LMS",
                "description": "If enabled, the score attained in any assessment attempt will be reported (regardless of whether the user passes or fails)",
                "default": false
              }
            }
          },
          "_defaultLanguage": {
            "type": "string",
            "title": "Default language code",
            "default": "en"
          },
          "_defaultDirection": {
            "type": "string",
            "title": "Default text direction",
            "default": "ltr",
            "enum": [
              "ltr",
              "rtl"
            ],
            "_backboneForms": "Select"
          },
          "_accessibility": {
            "type": "object",
            "title": "Accessibility",
            "default": {},
            "properties": {
              "_isEnabled": {
                "type": "boolean",
                "title": "Enable accessibility support",
                "default": true
              },
              "_isSkipNavigationEnabled": {
                "type": "boolean",
                "title": "Add link to skip navigation",
                "description": "Adds a link to the start of the page to allow assistive technology users to skip over the navigation and straight into to the page content",
                "default": true
              },
              "_ariaLevels": {
                "type": "object",
                "title": "Default ARIA levels",
                "description": "Defines what value to assign to the aria-level attribute for the various elements of Adapt",
                "default": {},
                "properties": {
                  "_menu": {
                    "type": "string",
                    "title": "Menu",
                    "default": "1"
                  },
                  "_menuGroup": {
                    "type": "string",
                    "title": "Menu group",
                    "default": "@menu+1"
                  },
                  "_menuItem": {
                    "type": "string",
                    "title": "Menu item",
                    "description": "This will need to be changed to 3 if menu groups are being used and A11Y support is required",
                    "default": "@menu+1"
                  },
                  "_page": {
                    "type": "string",
                    "title": "Page",
                    "default": "1"
                  },
                  "_article": {
                    "type": "string",
                    "title": "Article",
                    "default": "@page+1"
                  },
                  "_block": {
                    "type": "string",
                    "title": "Block",
                    "default": "@article+1"
                  },
                  "_component": {
                    "type": "string",
                    "title": "Component",
                    "default": "@block+1"
                  },
                  "_componentItem": {
                    "type": "string",
                    "title": "Component item",
                    "default": "@component+1"
                  },
                  "_notify": {
                    "type": "string",
                    "title": "Notify popup title",
                    "default": "1"
                  }
                }
              },
              "_options": {
                "type": "object",
                "title": "Advanced options",
                "description": "Optional object that can be used to customize the accessibility behaviour",
                "default": {},
                "_backboneForms": {
                  "type": "CodeEditor",
                  "mode": "json"
                }
              }
            }
          },
          "_fixes": {
            "type": "object",
            "title": "Miscellaneous fixes",
            "description": "Optional object that can be used to customize the application of fixes",
            "default": {
              "_imgLazyLoad": true
            },
            "_backboneForms": {
              "type": "CodeEditor",
              "mode": "json"
            }
          },
          "screenSize": {
            "type": "object",
            "title": "Device breakpoints",
            "default": {},
            "properties": {
              "small": {
                "type": "number",
                "title": "Small",
                "description": "Pixel width for the start of the small breakpoint, e.g. cellphones",
                "default": 0
              },
              "medium": {
                "type": "number",
                "title": "Medium",
                "description": "Pixel width for the start of the medium breakpoint, e.g. tablet devices",
                "default": 720
              },
              "large": {
                "type": "number",
                "title": "Large",
                "description": "Pixel width for the start of the large breakpoint, e.g. laptop/desktop computers",
                "default": 960
              },
              "xlarge": {
                "type": "number",
                "title": "Extra Large",
                "description": "Pixel width for the start of the extra large breakpoint, e.g. hd laptop/desktop computers",
                "default": 1280
              }
            }
          },
          "_questionWeight": {
            "type": "number",
            "title": "Default question weight",
            "default": 1,
            "_adapt": {
              "isSetting": true
            }
          },
          "_drawer": {
            "type": "object",
            "title": "Drawer animation",
            "default": {},
            "properties": {
              "_showEasing": {
                "type": "string",
                "title": "Opening easing function",
                "default": "easeOutQuart",
                "enum": [
                  "easeInSine",
                  "easeOutSine",
                  "easeInOutSine",
                  "easeInQuad",
                  "easeOutQuad",
                  "easeInOutQuad",
                  "easeInCubic",
                  "easeOutCubic",
                  "easeInOutCubic",
                  "easeInQuart",
                  "easeOutQuart",
                  "easeInOutQuart",
                  "easeInQuint",
                  "easeOutQuint",
                  "easeInOutQuint",
                  "easeInExpo",
                  "easeOutExpo",
                  "easeInOutExpo",
                  "easeInCirc",
                  "easeOutCirc",
                  "easeInOutCirc",
                  "easeInBack",
                  "easeOutBack",
                  "easeInOutBack",
                  "easeInElastic",
                  "easeOutElastic",
                  "easeInOutElastic",
                  "easeInBounce",
                  "easeOutBounce",
                  "easeInOutBounce"
                ],
                "_backboneForms": "Select"
              },
              "_hideEasing": {
                "type": "string",
                "title": "Closing easing function",
                "default": "easeInQuart",
                "enum": [
                  "easeInSine",
                  "easeOutSine",
                  "easeInOutSine",
                  "easeInQuad",
                  "easeOutQuad",
                  "easeInOutQuad",
                  "easeInCubic",
                  "easeOutCubic",
                  "easeInOutCubic",
                  "easeInQuart",
                  "easeOutQuart",
                  "easeInOutQuart",
                  "easeInQuint",
                  "easeOutQuint",
                  "easeInOutQuint",
                  "easeInExpo",
                  "easeOutExpo",
                  "easeInOutExpo",
                  "easeInCirc",
                  "easeOutCirc",
                  "easeInOutCirc",
                  "easeInBack",
                  "easeOutBack",
                  "easeInOutBack",
                  "easeInElastic",
                  "easeOutElastic",
                  "easeInOutElastic",
                  "easeInBounce",
                  "easeOutBounce",
                  "easeInOutBounce"
                ],
                "_backboneForms": "Select"
              },
              "_duration": {
                "type": "number",
                "title": "Duration",
                "default": 400
              },
              "_position": {
                "type": "string",
                "title": "Position",
                "default": "auto",
                "enum": [
                  "auto",
                  "left",
                  "right"
                ]
              },
              "_iconClass": {
                "type": "string",
                "title": "Drawer icon class",
                "description": "CSS class name to be applied to the drawer sidebar icon.",
                "default": "icon-list"
              }
            },
            "_adapt": {
              "isSetting": false
            }
          },
          "_generateSourcemap": {
            "type": "boolean",
            "title": "Generate source maps",
            "description": "Allows the course JavaScript & CSS to be debugged via the browser's developer tools",
            "default": false,
            "_adapt": {
              "isSetting": true
            }
          },
          "_forceRouteLocking": {
            "type": "boolean",
            "title": "Enforce route locking",
            "description": "If locking is enabled, this setting prevents navigating to locked routes",
            "default": true,
            "_adapt": {
              "isSetting": true
            }
          },
          "_disableAnimationFor": {
            "type": "array",
            "title": "Disable animation on selectors",
            "description": "Allows you to disable some animations (e.g. the drawer close animation) on platform(s) where they are not performing well, using CSS selectors to target the relevant platform(s) via the classes on the HTML element",
            "default": [],
            "_adapt": {
              "isSetting": true
            },
            "_backboneForms": "List"
          },
          "_logging": {
            "type": "object",
            "title": "Logging",
            "default": {},
            "properties": {
              "_isEnabled": {
                "type": "boolean",
                "title": "Enable logging",
                "default": true
              },
              "_level": {
                "type": "string",
                "title": "Log level",
                "default": "info",
                "enum": [
                  "debug",
                  "info",
                  "warn",
                  "error",
                  "fatal"
                ],
                "_backboneForms": "Select"
              },
              "_console": {
                "type": "boolean",
                "title": "Log to browser console",
                "default": true
              },
              "_warnFirstOnly": {
                "type": "boolean",
                "title": "Suppress subsequent deprecation warnings",
                "default": true
              }
            }
          },
          "_scrollingContainer": {
            "type": "object",
            "title": "Inline frame support",
            "default": {},
            "properties": {
              "_isEnabled": {
                "type": "boolean",
                "title": "Enable fixes",
                "default": true
              },
              "_limitToSelector": {
                "type": "string",
                "title": "Limit to selector",
                "description": "CSS selector to match against the HTML element when determining whether this should be active or not",
                "default": ""
              }
            }
          },
          "themeSettings": {
            "type": "object",
            "title": "Theme settings",
            "default": {}
          },
          "_themePreset": {
            "type": "string",
            "isObjectId": true,
            "title": "Theme preset"
          },
          "build": {
            "type": "object",
            "title": "Support for setting the course build type",
            "properties": {
              "strictMode": {
                "type": "boolean",
                "default": true,
                "inputType": "Checkbox",
                "title": "Use strict mode?",
                "description": "Strict mode improves performance by tightly restricting the declaration of variables inside code blocks and closures which may cause some older code to stop working. Please leave this at true unless you are experiencing issue with old plugins or third party libraries."
              },
              "targets": {
                "type": "string",
                "title": "Supported browsers override",
                "description": "Set the browsers that are supported. Overwrites the framework defaults if not empty. Current defaults are: 'last 2 chrome versions, last 2 firefox versions, last 2 safari versions, last 2 edge versions, last 2 ios_saf versions, last 2 and_chr versions, firefox esr'",
                "default": ""
              }
            }
          },
          "createdAt": {
            "description": "Date that the data was created",
            "type": "string",
            "format": "date-time",
            "isDate": true
          },
          "createdBy": {
            "description": "Author of the data",
            "type": "string",
            "isObjectId": true
          },
          "updatedAt": {
            "description": "Date that the data was last modified",
            "type": "string",
            "format": "date-time",
            "isDate": true
          },
          "tags": {
            "title": "Tags",
            "description": "Add tags by entering one or more words, separated with a comma (,)",
            "type": "array",
            "default": [],
            "uniqueItems": true,
            "items": {
              "type": "string",
              "isObjectId": true
            },
            "_backboneForms": "Tags"
          }
        },
        "required": [
          "createdAt",
          "createdBy",
          "updatedAt"
        ]
      },
      "content": {
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "$anchor": "content",
        "description": "The base schema inherited by all other schemas",
        "type": "object",
        "properties": {
          "_id": {
            "description": "Unique identifier",
            "type": "string",
            "isObjectId": true
          },
          "_type": {
            "type": "string",
            "title": "Type"
          },
          "_friendlyId": {
            "type": "string",
            "title": "Friendly id",
            "description": "A human-readable ID for this content object which will replace the standard _id field on course build (useful in instances where the _id must be specified in the config of an extension). Must be unique to this course."
          },
          "_parentId": {
            "type": "string",
            "isObjectId": true,
            "title": "Parent id"
          },
          "_courseId": {
            "type": "string",
            "isObjectId": true,
            "title": "Course id",
            "_adapt": {
              "editorOnly": true
            }
          },
          "title": {
            "type": "string",
            "title": "Title",
            "default": "Untitled",
            "_adapt": {
              "translatable": true
            }
          },
          "displayTitle": {
            "type": "string",
            "title": "Display title",
            "description": "When viewing an element - this is the title that will be displayed on the page",
            "default": "Untitled",
            "_adapt": {
              "translatable": true
            },
            "_backboneForms": "DisplayTitle"
          },
          "body": {
            "type": "string",
            "title": "Body",
            "default": "",
            "_adapt": {
              "translatable": true
            },
            "_backboneForms": "TextArea"
          },
          "instruction": {
            "type": "string",
            "title": "Instruction",
            "default": "",
            "_adapt": {
              "translatable": true
            }
          },
          "_classes": {
            "type": "string",
            "title": "Custom classes",
            "description": "Used to style or manipulate the look and feel of this element. These are predefined in the theme or added in Project Settings > Custom CSS/Less code",
            "default": "",
            "_adapt": {
              "isSetting": true
            }
          },
          "_isOptional": {
            "type": "boolean",
            "title": "Make this element optional",
            "description": "An optional element does not have to be completed, nor do any of the elements contained within it",
            "default": false,
            "_adapt": {
              "isSetting": true
            }
          },
          "_isAvailable": {
            "type": "boolean",
            "title": "Make this element available",
            "description": "Controls whether this element and its contents are available in the course or not",
            "default": true,
            "_adapt": {
              "isSetting": true
            }
          },
          "_isHidden": {
            "type": "boolean",
            "title": "Hide this element",
            "description": "Enabling this is equivalent to applying the CSS 'display:none' to the element",
            "default": false,
            "_adapt": {
              "isSetting": true
            }
          },
          "_isVisible": {
            "type": "boolean",
            "title": "Make this element visible",
            "description": "Disabling this is equivalent to applying the CSS 'visibility:hidden' to the element",
            "default": true,
            "_adapt": {
              "isSetting": true
            }
          },
          "_isA11yCompletionDescriptionEnabled": {
            "type": "boolean",
            "title": "Enable accessibility completion description",
            "description": "Controls whether a hidden label is appended to the element title that describes the completion state of the element.",
            "default": true,
            "_adapt": {
              "isSetting": true
            }
          },
          "_onScreen": {
            "type": "object",
            "title": "Animation classes",
            "description": "These settings allow you to attach classes to the element when it is within the browser's viewport; helpful for running CSS-based animations on elements as they scroll into view",
            "default": {},
            "properties": {
              "_isEnabled": {
                "type": "boolean",
                "title": "Add classes when this element is in view",
                "default": false,
                "_adapt": {
                  "isSetting": true
                }
              },
              "_classes": {
                "type": "string",
                "title": "Classes",
                "description": "The CSS class(es) to add to the element",
                "default": "",
                "_adapt": {
                  "isSetting": true
                }
              },
              "_percentInviewVertical": {
                "type": "number",
                "title": "Percent in view",
                "description": "Controls what percentage of the element's height needs to be in the viewport in order for the CSS class(es) to be added",
                "default": 50,
                "_adapt": {
                  "isSetting": true
                }
              }
            }
          },
          "_extensions": {
            "type": "object",
            "title": "Extensions",
            "default": {}
          },
          "_sortOrder": {
            "type": "number",
            "title": "Sort order",
            "_adapt": {
              "editorOnly": true
            }
          },
          "themeSettings": {
            "type": "object",
            "title": "Theme settings",
            "default": {}
          },
          "_colorLabel": {
            "type": "string",
            "title": "Color label",
            "default": "",
            "_adapt": {
              "editorOnly": true
            }
          },
          "createdAt": {
            "description": "Date that the data was created",
            "type": "string",
            "format": "date-time",
            "isDate": true
          },
          "createdBy": {
            "description": "Author of the data",
            "type": "string",
            "isObjectId": true
          },
          "updatedAt": {
            "description": "Date that the data was last modified",
            "type": "string",
            "format": "date-time",
            "isDate": true
          },
          "tags": {
            "title": "Tags",
            "description": "Add tags by entering one or more words, separated with a comma (,)",
            "type": "array",
            "default": [],
            "uniqueItems": true,
            "items": {
              "type": "string",
              "isObjectId": true
            },
            "_backboneForms": "Tags"
          }
        },
        "required": [
          "createdAt",
          "createdBy",
          "updatedAt"
        ]
      },
      "localauthuser": {
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "$anchor": "localauthuser",
        "description": "Local authentication user",
        "type": "object",
        "properties": {
          "_id": {
            "description": "Unique identifier",
            "type": "string",
            "isObjectId": true
          },
          "email": {
            "description": "Email address for the user",
            "type": "string",
            "format": "email"
          },
          "firstName": {
            "description": "First name of the user",
            "type": "string",
            "default": "Adapt"
          },
          "lastName": {
            "description": "Last name of the user",
            "type": "string",
            "default": "User"
          },
          "roles": {
            "description": "Roles assigned to this user",
            "type": "array",
            "items": {
              "type": "string",
              "isObjectId": true
            },
            "default": []
          },
          "failedLoginAttempts": {
            "description": "The number of failed login attempts",
            "type": "number",
            "default": 0
          }
        },
        "required": [
          "email",
          "authType",
          "password"
        ]
      },
      "article": {
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "$anchor": "article",
        "description": "The base schema inherited by all other schemas",
        "type": "object",
        "properties": {
          "_id": {
            "description": "Unique identifier",
            "type": "string",
            "isObjectId": true
          },
          "_type": {
            "type": "string",
            "title": "Type"
          },
          "_friendlyId": {
            "type": "string",
            "title": "Friendly id",
            "description": "A human-readable ID for this content object which will replace the standard _id field on course build (useful in instances where the _id must be specified in the config of an extension). Must be unique to this course."
          },
          "_parentId": {
            "type": "string",
            "isObjectId": true,
            "title": "Parent id"
          },
          "_courseId": {
            "type": "string",
            "isObjectId": true,
            "title": "Course id",
            "_adapt": {
              "editorOnly": true
            }
          },
          "title": {
            "type": "string",
            "title": "Title",
            "default": "Untitled",
            "_adapt": {
              "translatable": true
            }
          },
          "displayTitle": {
            "type": "string",
            "title": "Display title",
            "description": "When viewing an element - this is the title that will be displayed on the page",
            "default": "Untitled",
            "_adapt": {
              "translatable": true
            },
            "_backboneForms": "DisplayTitle"
          },
          "body": {
            "type": "string",
            "title": "Body",
            "default": "",
            "_adapt": {
              "translatable": true
            },
            "_backboneForms": "TextArea"
          },
          "instruction": {
            "type": "string",
            "title": "Instruction",
            "default": "",
            "_adapt": {
              "translatable": true
            }
          },
          "_classes": {
            "type": "string",
            "title": "Custom classes",
            "description": "Used to style or manipulate the look and feel of this element. These are predefined in the theme or added in Project Settings > Custom CSS/Less code",
            "default": "",
            "_adapt": {
              "isSetting": true
            }
          },
          "_isOptional": {
            "type": "boolean",
            "title": "Make this element optional",
            "description": "An optional element does not have to be completed, nor do any of the elements contained within it",
            "default": false,
            "_adapt": {
              "isSetting": true
            }
          },
          "_isAvailable": {
            "type": "boolean",
            "title": "Make this element available",
            "description": "Controls whether this element and its contents are available in the course or not",
            "default": true,
            "_adapt": {
              "isSetting": true
            }
          },
          "_isHidden": {
            "type": "boolean",
            "title": "Hide this element",
            "description": "Enabling this is equivalent to applying the CSS 'display:none' to the element",
            "default": false,
            "_adapt": {
              "isSetting": true
            }
          },
          "_isVisible": {
            "type": "boolean",
            "title": "Make this element visible",
            "description": "Disabling this is equivalent to applying the CSS 'visibility:hidden' to the element",
            "default": true,
            "_adapt": {
              "isSetting": true
            }
          },
          "_isA11yCompletionDescriptionEnabled": {
            "type": "boolean",
            "title": "Enable accessibility completion description",
            "description": "Controls whether a hidden label is appended to the element title that describes the completion state of the element.",
            "default": true,
            "_adapt": {
              "isSetting": true
            }
          },
          "_onScreen": {
            "type": "object",
            "title": "Animation classes",
            "description": "These settings allow you to attach classes to the element when it is within the browser's viewport; helpful for running CSS-based animations on elements as they scroll into view",
            "default": {},
            "properties": {
              "_isEnabled": {
                "type": "boolean",
                "title": "Add classes when this element is in view",
                "default": false,
                "_adapt": {
                  "isSetting": true
                }
              },
              "_classes": {
                "type": "string",
                "title": "Classes",
                "description": "The CSS class(es) to add to the element",
                "default": "",
                "_adapt": {
                  "isSetting": true
                }
              },
              "_percentInviewVertical": {
                "type": "number",
                "title": "Percent in view",
                "description": "Controls what percentage of the element's height needs to be in the viewport in order for the CSS class(es) to be added",
                "default": 50,
                "_adapt": {
                  "isSetting": true
                }
              }
            }
          },
          "_extensions": {
            "type": "object",
            "title": "Extensions",
            "default": {}
          },
          "_sortOrder": {
            "type": "number",
            "title": "Sort order",
            "_adapt": {
              "editorOnly": true
            }
          },
          "themeSettings": {
            "type": "object",
            "title": "Theme settings",
            "default": {}
          },
          "_colorLabel": {
            "type": "string",
            "title": "Color label",
            "default": "",
            "_adapt": {
              "editorOnly": true
            }
          },
          "createdAt": {
            "description": "Date that the data was created",
            "type": "string",
            "format": "date-time",
            "isDate": true
          },
          "createdBy": {
            "description": "Author of the data",
            "type": "string",
            "isObjectId": true
          },
          "updatedAt": {
            "description": "Date that the data was last modified",
            "type": "string",
            "format": "date-time",
            "isDate": true
          },
          "tags": {
            "title": "Tags",
            "description": "Add tags by entering one or more words, separated with a comma (,)",
            "type": "array",
            "default": [],
            "uniqueItems": true,
            "items": {
              "type": "string",
              "isObjectId": true
            },
            "_backboneForms": "Tags"
          },
          "_requireCompletionOf": {
            "type": "number",
            "title": "Number of blocks required for completion",
            "description": "The number of blocks within this article the learner must complete in order for this article to be set as completed. A value of -1 requires all of them to be completed",
            "default": -1,
            "_adapt": {
              "isSetting": true
            }
          }
        },
        "required": [
          "createdAt",
          "createdBy",
          "updatedAt"
        ]
      },
      "component": {
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "$anchor": "component",
        "description": "The base schema inherited by all other schemas",
        "type": "object",
        "properties": {
          "_id": {
            "description": "Unique identifier",
            "type": "string",
            "isObjectId": true
          },
          "_type": {
            "type": "string",
            "title": "Type"
          },
          "_friendlyId": {
            "type": "string",
            "title": "Friendly id",
            "description": "A human-readable ID for this content object which will replace the standard _id field on course build (useful in instances where the _id must be specified in the config of an extension). Must be unique to this course."
          },
          "_parentId": {
            "type": "string",
            "isObjectId": true,
            "title": "Parent id"
          },
          "_courseId": {
            "type": "string",
            "isObjectId": true,
            "title": "Course id",
            "_adapt": {
              "editorOnly": true
            }
          },
          "title": {
            "type": "string",
            "title": "Title",
            "default": "Untitled",
            "_adapt": {
              "translatable": true
            }
          },
          "displayTitle": {
            "type": "string",
            "title": "Display title",
            "description": "When viewing an element - this is the title that will be displayed on the page",
            "default": "Untitled",
            "_adapt": {
              "translatable": true
            },
            "_backboneForms": "DisplayTitle"
          },
          "body": {
            "type": "string",
            "title": "Body",
            "default": "",
            "_adapt": {
              "translatable": true
            },
            "_backboneForms": "TextArea"
          },
          "instruction": {
            "type": "string",
            "title": "Instruction",
            "default": "",
            "_adapt": {
              "translatable": true
            }
          },
          "_classes": {
            "type": "string",
            "title": "Custom classes",
            "description": "Used to style or manipulate the look and feel of this element. These are predefined in the theme or added in Project Settings > Custom CSS/Less code",
            "default": "",
            "_adapt": {
              "isSetting": true
            }
          },
          "_isOptional": {
            "type": "boolean",
            "title": "Make this element optional",
            "description": "An optional element does not have to be completed, nor do any of the elements contained within it",
            "default": false,
            "_adapt": {
              "isSetting": true
            }
          },
          "_isAvailable": {
            "type": "boolean",
            "title": "Make this element available",
            "description": "Controls whether this element and its contents are available in the course or not",
            "default": true,
            "_adapt": {
              "isSetting": true
            }
          },
          "_isHidden": {
            "type": "boolean",
            "title": "Hide this element",
            "description": "Enabling this is equivalent to applying the CSS 'display:none' to the element",
            "default": false,
            "_adapt": {
              "isSetting": true
            }
          },
          "_isVisible": {
            "type": "boolean",
            "title": "Make this element visible",
            "description": "Disabling this is equivalent to applying the CSS 'visibility:hidden' to the element",
            "default": true,
            "_adapt": {
              "isSetting": true
            }
          },
          "_isA11yCompletionDescriptionEnabled": {
            "type": "boolean",
            "title": "Enable accessibility completion description",
            "description": "Controls whether a hidden label is appended to the component title that describes the completion state of the component.",
            "default": true,
            "_adapt": {
              "isSetting": true
            }
          },
          "_onScreen": {
            "type": "object",
            "title": "Animation classes",
            "description": "These settings allow you to attach classes to the element when it is within the browser's viewport; helpful for running CSS-based animations on elements as they scroll into view",
            "default": {},
            "properties": {
              "_isEnabled": {
                "type": "boolean",
                "title": "Add classes when this element is in view",
                "default": false,
                "_adapt": {
                  "isSetting": true
                }
              },
              "_classes": {
                "type": "string",
                "title": "Classes",
                "description": "The CSS class(es) to add to the element",
                "default": "",
                "_adapt": {
                  "isSetting": true
                }
              },
              "_percentInviewVertical": {
                "type": "number",
                "title": "Percent in view",
                "description": "Controls what percentage of the element's height needs to be in the viewport in order for the CSS class(es) to be added",
                "default": 50,
                "_adapt": {
                  "isSetting": true
                }
              }
            }
          },
          "_extensions": {
            "type": "object",
            "title": "Extensions",
            "default": {}
          },
          "_sortOrder": {
            "type": "number",
            "title": "Sort order",
            "_adapt": {
              "editorOnly": true
            }
          },
          "themeSettings": {
            "type": "object",
            "title": "Theme settings",
            "default": {}
          },
          "_colorLabel": {
            "type": "string",
            "title": "Color label",
            "default": "",
            "_adapt": {
              "editorOnly": true
            }
          },
          "createdAt": {
            "description": "Date that the data was created",
            "type": "string",
            "format": "date-time",
            "isDate": true
          },
          "createdBy": {
            "description": "Author of the data",
            "type": "string",
            "isObjectId": true
          },
          "updatedAt": {
            "description": "Date that the data was last modified",
            "type": "string",
            "format": "date-time",
            "isDate": true
          },
          "tags": {
            "title": "Tags",
            "description": "Add tags by entering one or more words, separated with a comma (,)",
            "type": "array",
            "default": [],
            "uniqueItems": true,
            "items": {
              "type": "string",
              "isObjectId": true
            },
            "_backboneForms": "Tags"
          },
          "_component": {
            "type": "string",
            "title": "Component"
          },
          "_layout": {
            "type": "string",
            "title": "Layout",
            "default": ""
          },
          "_isResetOnRevisit": {
            "type": "string",
            "title": "Reset state on revisit",
            "description": "Controls whether this component will be reset when the learner leaves the page then returns to it. The 'soft' setting will reset the component to allow the learner to attempt it again, but will not require them to do so; whereas the 'hard' setting will require them to do so. The default (false) will not cause the component to be reset",
            "default": "false",
            "enum": [
              "false",
              "soft",
              "hard"
            ],
            "_adapt": {
              "isSetting": true
            },
            "_backboneForms": "Select"
          },
          "properties": {
            "type": "object",
            "title": "Properties",
            "default": {}
          }
        },
        "required": [
          "createdAt",
          "createdBy",
          "updatedAt",
          "_component"
        ]
      },
      "block": {
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "$anchor": "block",
        "description": "The base schema inherited by all other schemas",
        "type": "object",
        "properties": {
          "_id": {
            "description": "Unique identifier",
            "type": "string",
            "isObjectId": true
          },
          "_type": {
            "type": "string",
            "title": "Type"
          },
          "_friendlyId": {
            "type": "string",
            "title": "Friendly id",
            "description": "A human-readable ID for this content object which will replace the standard _id field on course build (useful in instances where the _id must be specified in the config of an extension). Must be unique to this course."
          },
          "_parentId": {
            "type": "string",
            "isObjectId": true,
            "title": "Parent id"
          },
          "_courseId": {
            "type": "string",
            "isObjectId": true,
            "title": "Course id",
            "_adapt": {
              "editorOnly": true
            }
          },
          "title": {
            "type": "string",
            "title": "Title",
            "default": "Untitled",
            "_adapt": {
              "translatable": true
            }
          },
          "displayTitle": {
            "type": "string",
            "title": "Display title",
            "description": "When viewing an element - this is the title that will be displayed on the page",
            "default": "Untitled",
            "_adapt": {
              "translatable": true
            },
            "_backboneForms": "DisplayTitle"
          },
          "body": {
            "type": "string",
            "title": "Body",
            "default": "",
            "_adapt": {
              "translatable": true
            },
            "_backboneForms": "TextArea"
          },
          "instruction": {
            "type": "string",
            "title": "Instruction",
            "default": "",
            "_adapt": {
              "translatable": true
            }
          },
          "_classes": {
            "type": "string",
            "title": "Custom classes",
            "description": "Used to style or manipulate the look and feel of this element. These are predefined in the theme or added in Project Settings > Custom CSS/Less code",
            "default": "",
            "_adapt": {
              "isSetting": true
            }
          },
          "_isOptional": {
            "type": "boolean",
            "title": "Make this element optional",
            "description": "An optional element does not have to be completed, nor do any of the elements contained within it",
            "default": false,
            "_adapt": {
              "isSetting": true
            }
          },
          "_isAvailable": {
            "type": "boolean",
            "title": "Make this element available",
            "description": "Controls whether this element and its contents are available in the course or not",
            "default": true,
            "_adapt": {
              "isSetting": true
            }
          },
          "_isHidden": {
            "type": "boolean",
            "title": "Hide this element",
            "description": "Enabling this is equivalent to applying the CSS 'display:none' to the element",
            "default": false,
            "_adapt": {
              "isSetting": true
            }
          },
          "_isVisible": {
            "type": "boolean",
            "title": "Make this element visible",
            "description": "Disabling this is equivalent to applying the CSS 'visibility:hidden' to the element",
            "default": true,
            "_adapt": {
              "isSetting": true
            }
          },
          "_isA11yCompletionDescriptionEnabled": {
            "type": "boolean",
            "title": "Enable accessibility completion description",
            "description": "Controls whether a hidden label is appended to the element title that describes the completion state of the element.",
            "default": true,
            "_adapt": {
              "isSetting": true
            }
          },
          "_onScreen": {
            "type": "object",
            "title": "Animation classes",
            "description": "These settings allow you to attach classes to the element when it is within the browser's viewport; helpful for running CSS-based animations on elements as they scroll into view",
            "default": {},
            "properties": {
              "_isEnabled": {
                "type": "boolean",
                "title": "Add classes when this element is in view",
                "default": false,
                "_adapt": {
                  "isSetting": true
                }
              },
              "_classes": {
                "type": "string",
                "title": "Classes",
                "description": "The CSS class(es) to add to the element",
                "default": "",
                "_adapt": {
                  "isSetting": true
                }
              },
              "_percentInviewVertical": {
                "type": "number",
                "title": "Percent in view",
                "description": "Controls what percentage of the element's height needs to be in the viewport in order for the CSS class(es) to be added",
                "default": 50,
                "_adapt": {
                  "isSetting": true
                }
              }
            }
          },
          "_extensions": {
            "type": "object",
            "title": "Extensions",
            "default": {}
          },
          "_sortOrder": {
            "type": "number",
            "title": "Sort order",
            "_adapt": {
              "editorOnly": true
            }
          },
          "themeSettings": {
            "type": "object",
            "title": "Theme settings",
            "default": {}
          },
          "_colorLabel": {
            "type": "string",
            "title": "Color label",
            "default": "",
            "_adapt": {
              "editorOnly": true
            }
          },
          "createdAt": {
            "description": "Date that the data was created",
            "type": "string",
            "format": "date-time",
            "isDate": true
          },
          "createdBy": {
            "description": "Author of the data",
            "type": "string",
            "isObjectId": true
          },
          "updatedAt": {
            "description": "Date that the data was last modified",
            "type": "string",
            "format": "date-time",
            "isDate": true
          },
          "tags": {
            "title": "Tags",
            "description": "Add tags by entering one or more words, separated with a comma (,)",
            "type": "array",
            "default": [],
            "uniqueItems": true,
            "items": {
              "type": "string",
              "isObjectId": true
            },
            "_backboneForms": "Tags"
          },
          "_trackingId": {
            "type": "number",
            "title": "Tracking id",
            "default": 0
          },
          "layoutOptions": {
            "type": "array",
            "title": "Layout options",
            "default": [],
            "_adapt": {
              "editorOnly": true
            }
          },
          "_requireCompletionOf": {
            "type": "number",
            "title": "Number of components required for completion",
            "description": "The number of components within this block the learner must complete in order for this block to be set as completed. A value of -1 requires all of them to be completed",
            "default": -1,
            "_adapt": {
              "isSetting": true
            }
          }
        },
        "required": [
          "createdAt",
          "createdBy",
          "updatedAt"
        ]
      },
      "contentobject": {
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "$anchor": "contentobject",
        "description": "The base schema inherited by all other schemas",
        "type": "object",
        "properties": {
          "_id": {
            "description": "Unique identifier",
            "type": "string",
            "isObjectId": true
          },
          "_type": {
            "type": "string",
            "title": "Type"
          },
          "_friendlyId": {
            "type": "string",
            "title": "Friendly id",
            "description": "A human-readable ID for this content object which will replace the standard _id field on course build (useful in instances where the _id must be specified in the config of an extension). Must be unique to this course."
          },
          "_parentId": {
            "type": "string",
            "isObjectId": true,
            "title": "Parent id"
          },
          "_courseId": {
            "type": "string",
            "isObjectId": true,
            "title": "Course id",
            "_adapt": {
              "editorOnly": true
            }
          },
          "title": {
            "type": "string",
            "title": "Title",
            "default": "Untitled",
            "_adapt": {
              "translatable": true
            }
          },
          "displayTitle": {
            "type": "string",
            "title": "Display title",
            "description": "When viewing an element - this is the title that will be displayed on the page",
            "default": "Untitled",
            "_adapt": {
              "translatable": true
            },
            "_backboneForms": "DisplayTitle"
          },
          "body": {
            "type": "string",
            "title": "Body",
            "default": "",
            "_adapt": {
              "translatable": true
            },
            "_backboneForms": "TextArea"
          },
          "instruction": {
            "type": "string",
            "title": "Instruction",
            "default": "",
            "_adapt": {
              "translatable": true
            }
          },
          "_classes": {
            "type": "string",
            "title": "Custom classes",
            "description": "Used to style or manipulate the look and feel of this element. These are predefined in the theme or added in Project Settings > Custom CSS/Less code",
            "default": "",
            "_adapt": {
              "isSetting": true
            }
          },
          "_isOptional": {
            "type": "boolean",
            "title": "Make this element optional",
            "description": "An optional element does not have to be completed, nor do any of the elements contained within it",
            "default": false,
            "_adapt": {
              "isSetting": true
            }
          },
          "_isAvailable": {
            "type": "boolean",
            "title": "Make this element available",
            "description": "Controls whether this element and its contents are available in the course or not",
            "default": true,
            "_adapt": {
              "isSetting": true
            }
          },
          "_isHidden": {
            "type": "boolean",
            "title": "Hide this element",
            "description": "Enabling this is equivalent to applying the CSS 'display:none' to the element",
            "default": false,
            "_adapt": {
              "isSetting": true
            }
          },
          "_isVisible": {
            "type": "boolean",
            "title": "Make this element visible",
            "description": "Disabling this is equivalent to applying the CSS 'visibility:hidden' to the element",
            "default": true,
            "_adapt": {
              "isSetting": true
            }
          },
          "_isA11yCompletionDescriptionEnabled": {
            "type": "boolean",
            "title": "Enable accessibility completion description",
            "description": "Controls whether a hidden label is appended to the element title that describes the completion state of the element.",
            "default": true,
            "_adapt": {
              "isSetting": true
            }
          },
          "_onScreen": {
            "type": "object",
            "title": "Animation classes",
            "description": "These settings allow you to attach classes to the element when it is within the browser's viewport; helpful for running CSS-based animations on elements as they scroll into view",
            "default": {},
            "properties": {
              "_isEnabled": {
                "type": "boolean",
                "title": "Add classes when this element is in view",
                "default": false,
                "_adapt": {
                  "isSetting": true
                }
              },
              "_classes": {
                "type": "string",
                "title": "Classes",
                "description": "The CSS class(es) to add to the element",
                "default": "",
                "_adapt": {
                  "isSetting": true
                }
              },
              "_percentInviewVertical": {
                "type": "number",
                "title": "Percent in view",
                "description": "Controls what percentage of the element's height needs to be in the viewport in order for the CSS class(es) to be added",
                "default": 50,
                "_adapt": {
                  "isSetting": true
                }
              }
            }
          },
          "_extensions": {
            "type": "object",
            "title": "Extensions",
            "default": {}
          },
          "_sortOrder": {
            "type": "number",
            "title": "Sort order",
            "_adapt": {
              "editorOnly": true
            }
          },
          "themeSettings": {
            "type": "object",
            "title": "Theme settings",
            "default": {}
          },
          "_colorLabel": {
            "type": "string",
            "title": "Color label",
            "default": "",
            "_adapt": {
              "editorOnly": true
            }
          },
          "createdAt": {
            "description": "Date that the data was created",
            "type": "string",
            "format": "date-time",
            "isDate": true
          },
          "createdBy": {
            "description": "Author of the data",
            "type": "string",
            "isObjectId": true
          },
          "updatedAt": {
            "description": "Date that the data was last modified",
            "type": "string",
            "format": "date-time",
            "isDate": true
          },
          "tags": {
            "title": "Tags",
            "description": "Add tags by entering one or more words, separated with a comma (,)",
            "type": "array",
            "default": [],
            "uniqueItems": true,
            "items": {
              "type": "string",
              "isObjectId": true
            },
            "_backboneForms": "Tags"
          },
          "subtitle": {
            "type": "string",
            "title": "Subtitle",
            "description": "When viewing a menu/page - this is the subtitle that will be displayed on the menu/page",
            "default": "",
            "_adapt": {
              "translatable": true
            }
          },
          "pageBody": {
            "type": "string",
            "title": "Custom page body",
            "description": "If set, this text will be shown instead of the body text when this page is viewed",
            "default": "",
            "_adapt": {
              "translatable": true
            },
            "_backboneForms": "TextArea"
          },
          "_htmlClasses": {
            "type": "string",
            "title": "Custom HTML classes",
            "description": "If set, this CSS class/es will be applied to the <html> element whenever this is the active page in the course. These are predefined in the theme or added in Project Settings > Custom CSS/Less code",
            "default": ""
          },
          "_graphic": {
            "type": "object",
            "title": "Graphic",
            "default": {},
            "properties": {
              "alt": {
                "type": "string",
                "title": "Alternative text",
                "description": "A description of the image; required when it has meaning that must be conveyed to the learner. For 'decorative' images, leave this blank",
                "default": "",
                "_adapt": {
                  "translatable": true
                }
              },
              "src": {
                "type": "string",
                "isObjectId": true,
                "title": "Source",
                "_backboneForms": {
                  "type": "Asset",
                  "media": "image"
                }
              }
            }
          },
          "linkText": {
            "type": "string",
            "title": "Menu button text",
            "default": "View",
            "_adapt": {
              "translatable": true
            }
          },
          "duration": {
            "type": "string",
            "title": "Duration",
            "description": "Indicates how long this page or section should take to complete",
            "default": "",
            "_adapt": {
              "translatable": true
            }
          },
          "_lockedBy": {
            "type": "array",
            "title": "Elements to complete before this is unlocked",
            "description": "If the course is using a 'custom' menu lock type, this should contain the unique ID of the item(s) which must be completed before this is unlocked",
            "default": [],
            "_backboneForms": "List"
          },
          "_lockType": {
            "type": "string",
            "title": "Menu lock type",
            "description": "Defines which (if any) locking mechanism will be used. To be used only on submenus",
            "default": "",
            "enum": [
              "",
              "custom",
              "lockLast",
              "sequential",
              "unlockFirst"
            ],
            "_backboneForms": "Select"
          },
          "_requireCompletionOf": {
            "type": "number",
            "title": "Number of articles required for completion",
            "description": "The number of articles within this page the learner must complete in order for this page to be set as completed. A value of -1 requires all of them to be completed",
            "default": -1,
            "_adapt": {
              "isSetting": true
            }
          },
          "menuSettings": {
            "type": "object",
            "title": "Menu settings",
            "default": {}
          }
        },
        "required": [
          "createdAt",
          "createdBy",
          "updatedAt"
        ]
      },
      "course": {
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "$anchor": "course",
        "description": "The base schema inherited by all other schemas",
        "type": "object",
        "properties": {
          "_id": {
            "description": "Unique identifier",
            "type": "string",
            "isObjectId": true
          },
          "_type": {
            "type": "string",
            "title": "Type"
          },
          "_friendlyId": {
            "type": "string",
            "title": "Friendly id",
            "description": "A human-readable ID for this content object which will replace the standard _id field on course build (useful in instances where the _id must be specified in the config of an extension). Must be unique to this course."
          },
          "_parentId": {
            "type": "string",
            "isObjectId": true,
            "title": "Parent id"
          },
          "_courseId": {
            "type": "string",
            "isObjectId": true,
            "title": "Course id",
            "_adapt": {
              "editorOnly": true
            }
          },
          "title": {
            "type": "string",
            "title": "Title",
            "default": "Untitled",
            "_adapt": {
              "translatable": true
            }
          },
          "displayTitle": {
            "type": "string",
            "title": "Display title",
            "description": "When viewing an element - this is the title that will be displayed on the page",
            "default": "Untitled",
            "_adapt": {
              "translatable": true
            },
            "_backboneForms": "DisplayTitle"
          },
          "body": {
            "type": "string",
            "title": "Body",
            "default": "",
            "_adapt": {
              "translatable": true
            },
            "_backboneForms": "TextArea"
          },
          "instruction": {
            "type": "string",
            "title": "Instruction",
            "default": "",
            "_adapt": {
              "translatable": true
            }
          },
          "_classes": {
            "type": "string",
            "title": "Custom classes",
            "description": "Used to style or manipulate the look and feel of this element. These are predefined in the theme or added in Project Settings > Custom CSS/Less code",
            "default": "",
            "_adapt": {
              "isSetting": true
            }
          },
          "_isOptional": {
            "type": "boolean",
            "title": "Make this element optional",
            "description": "An optional element does not have to be completed, nor do any of the elements contained within it",
            "default": false,
            "_adapt": {
              "isSetting": true
            }
          },
          "_isAvailable": {
            "type": "boolean",
            "title": "Make this element available",
            "description": "Controls whether this element and its contents are available in the course or not",
            "default": true,
            "_adapt": {
              "isSetting": true
            }
          },
          "_isHidden": {
            "type": "boolean",
            "title": "Hide this element",
            "description": "Enabling this is equivalent to applying the CSS 'display:none' to the element",
            "default": false,
            "_adapt": {
              "isSetting": true
            }
          },
          "_isVisible": {
            "type": "boolean",
            "title": "Make this element visible",
            "description": "Disabling this is equivalent to applying the CSS 'visibility:hidden' to the element",
            "default": true,
            "_adapt": {
              "isSetting": true
            }
          },
          "_isA11yCompletionDescriptionEnabled": {
            "type": "boolean",
            "title": "Enable accessibility completion description",
            "description": "Controls whether a hidden label is appended to the element title that describes the completion state of the element.",
            "default": true,
            "_adapt": {
              "isSetting": true
            }
          },
          "_onScreen": {
            "type": "object",
            "title": "Animation classes",
            "description": "These settings allow you to attach classes to the element when it is within the browser's viewport; helpful for running CSS-based animations on elements as they scroll into view",
            "default": {},
            "properties": {
              "_isEnabled": {
                "type": "boolean",
                "title": "Add classes when this element is in view",
                "default": false,
                "_adapt": {
                  "isSetting": true
                }
              },
              "_classes": {
                "type": "string",
                "title": "Classes",
                "description": "The CSS class(es) to add to the element",
                "default": "",
                "_adapt": {
                  "isSetting": true
                }
              },
              "_percentInviewVertical": {
                "type": "number",
                "title": "Percent in view",
                "description": "Controls what percentage of the element's height needs to be in the viewport in order for the CSS class(es) to be added",
                "default": 50,
                "_adapt": {
                  "isSetting": true
                }
              }
            }
          },
          "_extensions": {
            "type": "object",
            "title": "Extensions",
            "default": {}
          },
          "_sortOrder": {
            "type": "number",
            "title": "Sort order",
            "_adapt": {
              "editorOnly": true
            }
          },
          "themeSettings": {
            "type": "object",
            "title": "Theme settings",
            "default": {}
          },
          "_colorLabel": {
            "type": "string",
            "title": "Color label",
            "default": "",
            "_adapt": {
              "editorOnly": true
            }
          },
          "createdAt": {
            "description": "Date that the data was created",
            "type": "string",
            "format": "date-time",
            "isDate": true
          },
          "createdBy": {
            "description": "Author of the data",
            "type": "string",
            "isObjectId": true
          },
          "updatedAt": {
            "description": "Date that the data was last modified",
            "type": "string",
            "format": "date-time",
            "isDate": true
          },
          "tags": {
            "title": "Tags",
            "description": "Add tags to your course by entering one or more words, separated with a comma (,)",
            "type": "array",
            "default": [],
            "uniqueItems": true,
            "items": {
              "type": "string",
              "isObjectId": true
            },
            "_backboneForms": "Tags",
            "_adapt": {
              "editorOnly": true
            }
          },
          "heroImage": {
            "type": "string",
            "isObjectId": true,
            "title": "Preview image",
            "description": "The image that will be shown in the dashboard for this course",
            "_adapt": {
              "editorOnly": true
            },
            "_backboneForms": {
              "type": "Asset",
              "media": "image"
            }
          },
          "subtitle": {
            "type": "string",
            "title": "Subtitle",
            "description": "This is the subtitle that will be displayed on the course's main menu",
            "default": "",
            "_adapt": {
              "translatable": true
            }
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "This will be added to the course's manifest file metadata. It is not (currently) displayed anywhere within the course",
            "default": "",
            "_adapt": {
              "translatable": true
            }
          },
          "_htmlClasses": {
            "type": "string",
            "title": "Custom HTML classes",
            "description": "If set, this class will be applied to the <html> element when the top-level menu in the course is displayed. These are predefined in the theme or added in Custom CSS/Less code",
            "default": ""
          },
          "_latestTrackingId": {
            "type": "number",
            "title": "Latest tracking id",
            "default": 0
          },
          "_start": {
            "type": "object",
            "title": "Start settings",
            "description": "The start settings allow you to control which page is rendered when a course loads, potentially bypassing the menu",
            "default": {},
            "properties": {
              "_isEnabled": {
                "type": "boolean",
                "title": "Route to custom start page on course load",
                "default": false,
                "_adapt": {
                  "editorOnly": true
                }
              },
              "_startIds": {
                "type": "array",
                "title": "Start pages",
                "items": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "title": "ID",
                      "default": ""
                    },
                    "_skipIfComplete": {
                      "type": "boolean",
                      "title": "Skip page if complete",
                      "description": "If enabled, the page will not be selected as the first page if it has been already viewed/completed",
                      "default": false,
                      "_adapt": {
                        "editorOnly": true
                      }
                    },
                    "_className": {
                      "type": "string",
                      "title": "Limit to classes",
                      "description": "Optional comma-separated list of class names which will be used to select this start page",
                      "default": ""
                    }
                  }
                }
              },
              "_force": {
                "type": "boolean",
                "title": "Always route to start page",
                "description": "If enabled, the routing will be forced to the appropriate start page, regardless of the URL",
                "default": false,
                "_adapt": {
                  "editorOnly": true
                }
              },
              "_isMenuDisabled": {
                "type": "boolean",
                "title": "Disable menu",
                "description": "Allows you to prevent the user from seeing - or navigating to - the main menu",
                "default": false,
                "_adapt": {
                  "editorOnly": true
                }
              }
            }
          },
          "_globals": {
            "type": "object",
            "title": "Globals",
            "default": {},
            "properties": {
              "_accessibility": {
                "type": "object",
                "title": "Accessibility",
                "default": {},
                "required": [
                  "skipNavigationText"
                ],
                "properties": {
                  "skipNavigationText": {
                    "type": "string",
                    "title": "Skip to main content label",
                    "default": "Skip to main content",
                    "_adapt": {
                      "translatable": true
                    }
                  },
                  "_ariaLabels": {
                    "type": "object",
                    "title": "ARIA labels",
                    "default": {},
                    "properties": {
                      "answeredIncorrectly": {
                        "type": "string",
                        "title": "Answered incorrectly",
                        "default": "You answered incorrectly",
                        "_adapt": {
                          "translatable": true
                        }
                      },
                      "answeredCorrectly": {
                        "type": "string",
                        "title": "Answered correctly",
                        "default": "You answered correctly",
                        "_adapt": {
                          "translatable": true
                        }
                      },
                      "selectedAnswer": {
                        "type": "string",
                        "title": "Selected answer",
                        "default": "selected",
                        "_adapt": {
                          "translatable": true
                        }
                      },
                      "unselectedAnswer": {
                        "type": "string",
                        "title": "Unselected answer",
                        "default": "not selected",
                        "_adapt": {
                          "translatable": true
                        }
                      },
                      "skipNavigation": {
                        "type": "string",
                        "title": "Skip navigation",
                        "default": "Skip navigation",
                        "_adapt": {
                          "translatable": true
                        }
                      },
                      "previous": {
                        "type": "string",
                        "title": "Previous",
                        "default": "Back",
                        "_adapt": {
                          "translatable": true
                        }
                      },
                      "navigationDrawer": {
                        "type": "string",
                        "title": "Navigation drawer",
                        "default": "Open course resources.",
                        "_adapt": {
                          "translatable": true
                        }
                      },
                      "close": {
                        "type": "string",
                        "title": "Close",
                        "default": "Close",
                        "_adapt": {
                          "translatable": true
                        }
                      },
                      "closeDrawer": {
                        "type": "string",
                        "title": "Close drawer",
                        "default": "Close Drawer",
                        "_adapt": {
                          "translatable": true
                        }
                      },
                      "closeResources": {
                        "type": "string",
                        "title": "Close resources",
                        "default": "Close resources",
                        "_adapt": {
                          "translatable": true
                        }
                      },
                      "drawer": {
                        "type": "string",
                        "title": "Drawer",
                        "default": "Top of side drawer",
                        "_adapt": {
                          "translatable": true
                        }
                      },
                      "closePopup": {
                        "type": "string",
                        "title": "Close popup",
                        "default": "Close popup",
                        "_adapt": {
                          "translatable": true
                        }
                      },
                      "next": {
                        "type": "string",
                        "title": "Next",
                        "default": "Next",
                        "_adapt": {
                          "translatable": true
                        }
                      },
                      "done": {
                        "type": "string",
                        "title": "Done",
                        "default": "Done",
                        "_adapt": {
                          "translatable": true
                        }
                      },
                      "complete": {
                        "type": "string",
                        "title": "Complete",
                        "default": "Completed",
                        "_adapt": {
                          "translatable": true
                        }
                      },
                      "incomplete": {
                        "type": "string",
                        "title": "Incomplete",
                        "default": "Incomplete",
                        "_adapt": {
                          "translatable": true
                        }
                      },
                      "incorrect": {
                        "type": "string",
                        "title": "Incorrect",
                        "default": "Incorrect",
                        "_adapt": {
                          "translatable": true
                        }
                      },
                      "correct": {
                        "type": "string",
                        "title": "Correct",
                        "default": "Correct",
                        "_adapt": {
                          "translatable": true
                        }
                      },
                      "locked": {
                        "type": "string",
                        "title": "Locked",
                        "default": "Locked",
                        "_adapt": {
                          "translatable": true
                        }
                      },
                      "visited": {
                        "type": "string",
                        "title": "Visited",
                        "default": "Visited",
                        "_adapt": {
                          "translatable": true
                        }
                      },
                      "required": {
                        "type": "string",
                        "title": "Required",
                        "default": "Required",
                        "_adapt": {
                          "translatable": true
                        }
                      },
                      "optional": {
                        "type": "string",
                        "title": "Optional",
                        "default": "Optional",
                        "_adapt": {
                          "translatable": true
                        }
                      }
                    }
                  },
                  "altFeedbackTitle": {
                    "type": "string",
                    "title": "Alternative Feedback Title",
                    "description": "Text read out by screen readers if no visual title is set for component question feedback.",
                    "default": "Feedback",
                    "_adapt": {
                      "translatable": true
                    }
                  }
                }
              },
              "_extensions": {
                "type": "object",
                "title": "Extensions",
                "default": {},
                "properties": {
                  "_drawer": {
                    "type": "object",
                    "title": "Drawer",
                    "default": {},
                    "properties": {
                      "_navOrder": {
                        "type": "number",
                        "title": "Navigation bar order",
                        "description": "Determines the order in which the object is displayed in the navigation bar. Negative numbers (e.g. -100) are left-aligned. Positive numbers (e.g. 100) are right-aligned.",
                        "default": 100
                      },
                      "_navTooltip": {
                        "type": "object",
                        "title": "Navigation tooltip",
                        "default": {},
                        "properties": {
                          "_isEnabled": {
                            "type": "boolean",
                            "title": "Enabled",
                            "default": true
                          },
                          "text": {
                            "type": "string",
                            "title": "",
                            "default": "{{ariaLabel}}",
                            "_adapt": {
                              "translatable": true
                            }
                          }
                        }
                      }
                    }
                  },
                  "_navigation": {
                    "type": "object",
                    "title": "Navigation",
                    "default": {},
                    "properties": {
                      "_skipButton": {
                        "type": "object",
                        "title": "Skip navigation button",
                        "default": {},
                        "properties": {
                          "_navOrder": {
                            "type": "number",
                            "title": "Navigation bar order",
                            "description": "Determines the order in which the object is displayed in the navigation bar. Negative numbers (e.g. -100) are left-aligned. Positive numbers (e.g. 100) are right-aligned.",
                            "default": -100
                          }
                        }
                      },
                      "_backButton": {
                        "type": "object",
                        "title": "Back button",
                        "default": {},
                        "properties": {
                          "_navOrder": {
                            "type": "number",
                            "title": "Navigation bar order",
                            "description": "Determines the order in which the object is displayed in the navigation bar. Negative numbers (e.g. -100) are left-aligned. Positive numbers (e.g. 100) are right-aligned.",
                            "default": 0
                          }
                        }
                      },
                      "_backNavTooltip": {
                        "type": "object",
                        "title": "Back tooltip",
                        "default": {},
                        "properties": {
                          "_isEnabled": {
                            "type": "boolean",
                            "title": "Enabled",
                            "default": true
                          },
                          "text": {
                            "type": "string",
                            "title": "",
                            "default": "{{ariaLabel}}",
                            "_adapt": {
                              "translatable": true
                            }
                          }
                        }
                      },
                      "_spacers": {
                        "type": "array",
                        "title": "Items",
                        "default": [
                          {
                            "_navOrder": 0
                          }
                        ],
                        "items": {
                          "type": "object",
                          "properties": {
                            "_navOrder": {
                              "type": "number",
                              "title": "Navigation bar order",
                              "description": "Determines the order in which the object is displayed in the navigation bar. Negative numbers (e.g. -100) are left-aligned. Positive numbers (e.g. 100) are right-aligned.",
                              "default": 0
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "_tooltips": {
            "type": "object",
            "title": "Tooltips",
            "default": {},
            "properties": {
              "_isEnabled": {
                "type": "boolean",
                "title": "Enabled",
                "default": true
              }
            }
          },
          "_buttons": {
            "type": "object",
            "title": "Buttons",
            "default": {},
            "properties": {
              "_submit": {
                "type": "object",
                "title": "Submit",
                "default": {},
                "required": [
                  "buttonText",
                  "ariaLabel"
                ],
                "properties": {
                  "buttonText": {
                    "type": "string",
                    "title": "Button text",
                    "default": "Submit",
                    "_adapt": {
                      "translatable": true
                    }
                  },
                  "ariaLabel": {
                    "type": "string",
                    "title": "ARIA label",
                    "default": "Submit",
                    "_adapt": {
                      "translatable": true
                    }
                  }
                }
              },
              "_reset": {
                "type": "object",
                "title": "Reset",
                "default": {},
                "required": [
                  "buttonText",
                  "ariaLabel"
                ],
                "properties": {
                  "buttonText": {
                    "type": "string",
                    "title": "Button text",
                    "default": "Reset",
                    "_adapt": {
                      "translatable": true
                    }
                  },
                  "ariaLabel": {
                    "type": "string",
                    "title": "ARIA label",
                    "default": "Reset",
                    "_adapt": {
                      "translatable": true
                    }
                  }
                }
              },
              "_showCorrectAnswer": {
                "type": "object",
                "title": "Show correct answer",
                "default": {},
                "required": [
                  "buttonText",
                  "ariaLabel"
                ],
                "properties": {
                  "buttonText": {
                    "type": "string",
                    "title": "Button text",
                    "default": "Show correct answer",
                    "_adapt": {
                      "translatable": true
                    }
                  },
                  "ariaLabel": {
                    "type": "string",
                    "title": "ARIA label",
                    "default": "Show correct answer",
                    "_adapt": {
                      "translatable": true
                    }
                  }
                }
              },
              "_hideCorrectAnswer": {
                "type": "object",
                "title": "Hide correct answer",
                "default": {},
                "required": [
                  "buttonText",
                  "ariaLabel"
                ],
                "properties": {
                  "buttonText": {
                    "type": "string",
                    "title": "Button text",
                    "default": "Show your answer",
                    "_adapt": {
                      "translatable": true
                    }
                  },
                  "ariaLabel": {
                    "type": "string",
                    "title": "ARIA label",
                    "default": "Show your answer",
                    "_adapt": {
                      "translatable": true
                    }
                  }
                }
              },
              "_showFeedback": {
                "type": "object",
                "title": "Show feedback",
                "default": {},
                "required": [
                  "buttonText",
                  "ariaLabel"
                ],
                "properties": {
                  "buttonText": {
                    "type": "string",
                    "title": "Button text",
                    "default": "Show feedback",
                    "_adapt": {
                      "translatable": true
                    }
                  },
                  "ariaLabel": {
                    "type": "string",
                    "title": "ARIA label",
                    "default": "Show feedback",
                    "_adapt": {
                      "translatable": true
                    }
                  }
                }
              },
              "remainingAttemptsText": {
                "type": "string",
                "title": "Remaining attempts label",
                "default": "attempts remaining",
                "_adapt": {
                  "translatable": true
                }
              },
              "remainingAttemptText": {
                "type": "string",
                "title": "Final attempt label",
                "default": "final attempt",
                "_adapt": {
                  "translatable": true
                }
              },
              "disabledAriaLabel": {
                "type": "string",
                "title": "Disabled ARIA label",
                "default": "This button is disabled at the moment",
                "_adapt": {
                  "translatable": true
                }
              }
            },
            "_adapt": {
              "isSetting": false
            }
          },
          "_navigation": {
            "type": "object",
            "title": "Navigation settings",
            "description": "The navigation settings allow you to control the behaviour of the navigation bar.",
            "default": {},
            "properties": {
              "_isDefaultNavigationDisabled": {
                "type": "boolean",
                "title": "Disable default navigation bar",
                "default": false,
                "_adapt": {
                  "editorOnly": true
                }
              },
              "_navigationAlignment": {
                "type": "string",
                "title": "Navigation alignment",
                "description": "The CSS selector that determines where the navigation bar is displayed. Must be a selector targeting the HTML element.",
                "default": "top",
                "enum": [
                  "top",
                  "bottom"
                ],
                "_backboneForms": "Select",
                "_adapt": {
                  "editorOnly": true
                }
              },
              "_isBottomOnTouchDevices": {
                "type": "boolean",
                "title": "Is bottom on touch devices",
                "default": false,
                "_adapt": {
                  "editorOnly": true
                }
              },
              "_showLabel": {
                "type": "boolean",
                "title": "Show navigation button labels",
                "default": false,
                "_adapt": {
                  "editorOnly": true
                }
              },
              "_showLabelAtWidth": {
                "type": "string",
                "title": "Show label at this breakpoint and higher",
                "description": "When the user's browser window is at least this wide, the labels will be shown. Options refer to the standard Adapt breakpoints. The 'any' option will show the label at any size.",
                "default": "medium",
                "enum": [
                  "any",
                  "small",
                  "medium",
                  "large"
                ],
                "_backboneForms": "Select",
                "_adapt": {
                  "editorOnly": true
                }
              },
              "_labelPosition": {
                "type": "string",
                "title": "Label position",
                "description": "Where to show the label in relation to the button icons",
                "default": "auto",
                "enum": [
                  "auto",
                  "top",
                  "bottom",
                  "left",
                  "right"
                ],
                "_backboneForms": "Select",
                "_adapt": {
                  "editorOnly": true
                }
              }
            }
          },
          "_requireCompletionOf": {
            "type": "number",
            "title": "Number of pages/submenus required for completion",
            "description": "The number of content objects within this course the learner must complete in order for this course to be set as completed. A value of -1 requires all of them to be completed",
            "default": -1,
            "_adapt": {
              "isSetting": true
            }
          },
          "_isSelected": {
            "type": "boolean",
            "title": "Is selected",
            "default": false,
            "_adapt": {
              "editorOnly": true
            }
          },
          "_hasPreview": {
            "type": "boolean",
            "title": "Has preview",
            "default": false,
            "_adapt": {
              "editorOnly": true
            }
          },
          "_isShared": {
            "type": "boolean",
            "title": "Share with all users",
            "description": "Defines whether this course will be editable by all users",
            "default": false,
            "_adapt": {
              "editorOnly": true
            }
          },
          "_shareWithUsers": {
            "type": "array",
            "title": "Share with specific users",
            "description": "Defines which individual users are able to edit this course",
            "items": {
              "type": "string",
              "isObjectId": true
            },
            "_backboneForms": "Users"
          },
          "themeVariables": {
            "type": "object",
            "title": "Theme variables",
            "default": {}
          },
          "menuSettings": {
            "type": "object",
            "title": "Menu settings",
            "default": {}
          },
          "_lockType": {
            "type": "string",
            "title": "Menu lock type",
            "description": "Defines which (if any) locking mechanism will be used for menu items",
            "default": "",
            "enum": [
              "",
              "custom",
              "lockLast",
              "sequential",
              "unlockFirst"
            ],
            "_backboneForms": "Select"
          },
          "customStyle": {
            "type": "string",
            "title": "Custom CSS/Less code",
            "description": "Add any custom CSS or valid Less code here",
            "default": "",
            "_backboneForms": {
              "type": "CodeEditor",
              "mode": "less"
            }
          },
          "externalReferences": {
            "type": "object",
            "title": "External references",
            "default": {}
          }
        },
        "required": [
          "createdAt",
          "createdBy",
          "updatedAt"
        ]
      }
    }
  },
  "paths": {
    "/api/adapt/export/:id": {
      "post": {
        "summary": "Create an export zip of an Adapt course",
        "responses": {
          "200": {
            "description": "The Adapt build data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#components/schemas/adaptbuild"
                }
              }
            }
          }
        },
        "tags": [
          "adapt"
        ],
        "description": "Required scopes: <span>export:adapt</span>",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "security": {
          "roles": [
            "export:adapt"
          ]
        }
      },
      "get": {
        "summary": "Retrieve an Adapt course export zip",
        "responses": {
          "200": {
            "description": "Course build zip file",
            "content": {
              "application/zip": {}
            }
          }
        },
        "tags": [
          "adapt"
        ],
        "description": "Required scopes: <span>export:adapt</span>",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "security": {
          "roles": [
            "export:adapt"
          ]
        }
      }
    },
    "/api/adapt/import": {
      "post": {
        "summary": "Import an Adapt course",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$schema": "https://json-schema.org/draft/2020-12/schema",
                "type": "object",
                "properties": {
                  "isDryRun": {
                    "type": "Boolean",
                    "default": false
                  },
                  "importContent": {
                    "type": "Boolean",
                    "default": true
                  },
                  "importPlugins": {
                    "type": "Boolean",
                    "default": true
                  },
                  "updatePlugins": {
                    "type": "Boolean",
                    "default": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "title": {
                      "type": "string"
                    },
                    "courseId": {
                      "type": "string"
                    },
                    "versions": {
                      "type": "object"
                    },
                    "content": {
                      "type": "object",
                      "properties": {
                        "course": {
                          "type": "number"
                        },
                        "config": {
                          "type": "number"
                        },
                        "menu": {
                          "type": "number"
                        },
                        "page": {
                          "type": "number"
                        },
                        "article": {
                          "type": "number"
                        },
                        "block": {
                          "type": "number"
                        },
                        "component": {
                          "type": "number"
                        }
                      }
                    },
                    "statusReport": {
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "code": {
                                "type": "string"
                              },
                              "data": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "warn": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "code": {
                                "type": "string"
                              },
                              "data": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "info": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "code": {
                                "type": "string"
                              },
                              "data": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "adapt"
        ],
        "description": "Required scopes: <span>import:adapt</span>",
        "parameters": [],
        "security": {
          "roles": [
            "import:adapt"
          ]
        }
      }
    },
    "/api/adapt/preview/:id": {
      "post": {
        "summary": "Build a preview of an Adapt course",
        "responses": {
          "200": {
            "description": "The Adapt build data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#components/schemas/adaptbuild"
                }
              }
            }
          }
        },
        "tags": [
          "adapt"
        ],
        "description": "Required scopes: <span>preview:adapt</span>",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "security": {
          "roles": [
            "preview:adapt"
          ]
        }
      }
    },
    "/api/adapt/publish/:id": {
      "post": {
        "summary": "Create a publish zip of an Adapt course",
        "responses": {
          "200": {
            "description": "The Adapt build data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#components/schemas/adaptbuild"
                }
              }
            }
          }
        },
        "tags": [
          "adapt"
        ],
        "description": "Required scopes: <span>publish:adapt</span>",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "security": {
          "roles": [
            "publish:adapt"
          ]
        }
      },
      "get": {
        "summary": "Retrieve an Adapt course publish zip",
        "responses": {
          "200": {
            "description": "Course build zip file",
            "content": {
              "application/zip": {}
            }
          }
        },
        "tags": [
          "adapt"
        ],
        "description": "Required scopes: <span>publish:adapt</span>",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "security": {
          "roles": [
            "publish:adapt"
          ]
        }
      }
    },
    "/api/adapt/purge": {
      "post": {
        "tags": [
          "adapt"
        ],
        "description": "Required scopes: <span>update:adapt</span>",
        "parameters": [],
        "security": {
          "roles": [
            "update:adapt"
          ]
        }
      }
    },
    "/api/adapt/update": {
      "post": {
        "summary": "Updates the installed framework",
        "responses": {
          "200": {
            "description": "Describes the upgraded elements",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "from": {
                      "type": "string"
                    },
                    "to": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "adapt"
        ],
        "description": "Required scopes: <span>update:adapt</span>",
        "parameters": [],
        "security": {
          "roles": [
            "update:adapt"
          ]
        }
      },
      "get": {
        "summary": "Retrieve framework update data",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "canBeUpdated": {
                      "type": "boolean"
                    },
                    "currentVersion": {
                      "type": "string"
                    },
                    "latestCompatibleVersion": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "adapt"
        ],
        "description": "Required scopes: <span>update:adapt</span>",
        "parameters": [],
        "security": {
          "roles": [
            "update:adapt"
          ]
        }
      }
    },
    "/api/adaptcollab/getUser": {
      "get": {
        "tags": [
          "adaptcollab"
        ],
        "description": "Required scopes: <span>read:adaptcollab</span>",
        "parameters": [],
        "security": {
          "roles": [
            "read:adaptcollab"
          ]
        }
      }
    },
    "/api/assets": {
      "post": {
        "summary": "Insert a new asset document",
        "parameters": [],
        "requestBody": {
          "description": "The asset data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/asset"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The asset data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/asset"
                }
              }
            }
          }
        },
        "tags": [
          "assets"
        ],
        "description": "Required scopes: <span>write:assets</span>",
        "security": {
          "roles": [
            "write:assets"
          ]
        }
      },
      "get": {
        "summary": "Retrieve all assets documents",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "How many results should be returned Default value is 100 (max value is 250)"
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page of results to return (determined from the limit value)"
          }
        ],
        "responses": {
          "200": {
            "description": "The asset data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/asset"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "assets"
        ],
        "description": "Required scopes: <span>read:assets</span>",
        "security": {
          "roles": [
            "read:assets"
          ]
        }
      }
    },
    "/api/assets/:_id": {
      "put": {
        "summary": "Replace an existing asset document",
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true
          }
        ],
        "requestBody": {
          "description": "The asset data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/asset"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The asset data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/asset"
                }
              }
            }
          }
        },
        "tags": [
          "assets"
        ],
        "description": "Required scopes: <span>write:assets</span>",
        "security": {
          "roles": [
            "write:assets"
          ]
        }
      },
      "get": {
        "summary": "Retrieve an existing asset document",
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "description": "The asset data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/asset"
                }
              }
            }
          }
        },
        "tags": [
          "assets"
        ],
        "description": "Required scopes: <span>read:assets</span>",
        "security": {
          "roles": [
            "read:assets"
          ]
        }
      },
      "patch": {
        "summary": "Update an existing asset document",
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true
          }
        ],
        "requestBody": {
          "description": "The asset data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/asset"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The asset data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/asset"
                }
              }
            }
          }
        },
        "tags": [
          "assets"
        ],
        "description": "Required scopes: <span>write:assets</span>",
        "security": {
          "roles": [
            "write:assets"
          ]
        }
      },
      "delete": {
        "summary": "Delete an existing asset document",
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "The asset data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/asset"
                }
              }
            }
          }
        },
        "tags": [
          "assets"
        ],
        "description": "Required scopes: <span>write:assets</span>",
        "security": {
          "roles": [
            "write:assets"
          ]
        }
      }
    },
    "/api/assets/query": {
      "post": {
        "summary": "Query all assets",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "How many results should be returned Default value is 100 (max value is 250)"
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page of results to return (determined from the limit value)"
          }
        ],
        "responses": {
          "200": {
            "description": "The asset data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/asset"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "assets"
        ],
        "description": "Required scopes: <span>read:assets</span>",
        "security": {
          "roles": [
            "read:assets"
          ]
        }
      }
    },
    "/api/assets/schema": {
      "get": {
        "summary": "Retrieve asset schema",
        "parameters": [],
        "tags": [
          "assets"
        ],
        "description": "Required scopes: <span>read:schema</span>",
        "security": {
          "roles": [
            "read:schema"
          ]
        }
      }
    },
    "/api/assets/serve/:_id": {
      "get": {
        "summary": "Retrieve an asset file",
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true
          },
          {
            "name": "thumb",
            "in": "query",
            "description": "Whether the thumbnail should be sent",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false"
              ],
              "default": "false"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The asset file"
          }
        },
        "tags": [
          "assets"
        ],
        "description": "Required scopes: <span>read:assets</span>",
        "security": {
          "roles": [
            "read:assets"
          ]
        }
      }
    },
    "/api/auth/check": {
      "get": {
        "summary": "Checks current authentication status",
        "description": "Route requires no authentication<br/><br/>A HTTP status code of 200 will be returned if request could be authenticated successfully, otherwise an error will be returned.",
        "responses": {
          "200": {
            "description": "User authentication data",
            "content": {
              "application/json": {
                "schema": {
                  "$schema": "https://json-schema.org/draft/2020-12/schema",
                  "type": "object",
                  "properties": {
                    "scopes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "isSuper": {
                      "type": "boolean"
                    },
                    "user": {
                      "type": "object",
                      "properties": {
                        "_id": {
                          "type": "string"
                        },
                        "email": {
                          "type": "string"
                        },
                        "firstName": {
                          "type": "string"
                        },
                        "lastName": {
                          "type": "string"
                        },
                        "roles": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "auth"
        ],
        "parameters": [],
        "security": {
          "roles": []
        }
      }
    },
    "/api/auth/disavow": {
      "post": {
        "summary": "De-authenticates the current user from the API",
        "responses": {
          "204": {}
        },
        "tags": [
          "auth"
        ],
        "description": "Required scopes: <span>disavow:auth</span>",
        "parameters": [],
        "security": {
          "roles": [
            "disavow:auth"
          ]
        }
      }
    },
    "/api/auth/generatetoken": {
      "post": {
        "summary": "Creates a new authentication token",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$schema": "https://json-schema.org/draft/2020-12/schema",
                "type": "object",
                "properties": {
                  "lifespan": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "token": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "auth"
        ],
        "description": "Required scopes: <span>generatetoken:auth</span>",
        "parameters": [],
        "security": {
          "roles": [
            "generatetoken:auth"
          ]
        }
      }
    },
    "/api/auth/local": {
      "post": {
        "summary": "Authenticate with the API",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$schema": "https://json-schema.org/draft/2020-12/schema",
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "required": true
                  },
                  "password": {
                    "type": "string",
                    "required": true
                  },
                  "persistSession": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {}
        },
        "tags": [
          "auth local"
        ],
        "description": "Route requires no authentication",
        "parameters": [],
        "security": {
          "roles": []
        }
      }
    },
    "/api/auth/local/changepass": {
      "post": {
        "summary": "Change the password of a user",
        "description": "Route requires no authentication<br/><br/>Can be used with or without authentication. If authenticated, an email/password combination will be acepted. If unauthenticated, a valid reset token and password must be specified.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$schema": "https://json-schema.org/draft/2020-12/schema",
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  },
                  "token": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {}
        },
        "tags": [
          "auth local"
        ],
        "parameters": [],
        "security": {
          "roles": []
        }
      }
    },
    "/api/auth/local/disable": {
      "post": {
        "summary": "Disable user account",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$schema": "https://json-schema.org/draft/2020-12/schema",
                "type": "object",
                "properties": {
                  "_id": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {}
        },
        "tags": [
          "auth local"
        ],
        "description": "Required scopes: <span>write:users</span>",
        "parameters": [],
        "security": {
          "roles": [
            "write:users"
          ]
        }
      }
    },
    "/api/auth/local/enable": {
      "post": {
        "summary": "Enable user account",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$schema": "https://json-schema.org/draft/2020-12/schema",
                "type": "object",
                "properties": {
                  "_id": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {}
        },
        "tags": [
          "auth local"
        ],
        "description": "Required scopes: <span>write:users</span>",
        "parameters": [],
        "security": {
          "roles": [
            "write:users"
          ]
        }
      }
    },
    "/api/auth/local/forgotpass": {
      "post": {
        "summary": "Trigger a password reset",
        "description": "Route requires no authentication<br/><br/>Generates a password reset and emails this to the user with instructions on updating their password.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$schema": "https://json-schema.org/draft/2020-12/schema",
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$schema": "https://json-schema.org/draft/2020-12/schema",
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "auth local"
        ],
        "parameters": [],
        "security": {
          "roles": []
        }
      }
    },
    "/api/auth/local/invite": {
      "post": {
        "summary": "Invite a new user",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$schema": "https://json-schema.org/draft/2020-12/schema",
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {}
        },
        "tags": [
          "auth local"
        ],
        "description": "Required scopes: <span>register:users</span>",
        "parameters": [],
        "security": {
          "roles": [
            "register:users"
          ]
        }
      }
    },
    "/api/auth/local/register": {
      "post": {
        "summary": "Register a new user",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$schema": "https://json-schema.org/draft/2020-12/schema",
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "required": true
                  },
                  "firstName": {
                    "type": "string",
                    "required": true
                  },
                  "lastName": {
                    "type": "string",
                    "required": true
                  },
                  "password": {
                    "type": "string",
                    "required": true
                  },
                  "roles": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#components/schemas/localauthuser"
                }
              }
            }
          }
        },
        "tags": [
          "auth local"
        ],
        "description": "Required scopes: <span>register:users</span>",
        "parameters": [],
        "security": {
          "roles": [
            "register:users"
          ]
        }
      }
    },
    "/api/auth/local/registersuper": {
      "post": {
        "summary": "Register a new super user",
        "description": "ROUTE IS ONLY ACCESSIBLE FROM LOCALHOST.<br/><br/>Route requires no authentication<br/><br/>Only one user can be registered in this way, and if a super user already exists the request will fail.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$schema": "https://json-schema.org/draft/2020-12/schema",
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "required": true
                  },
                  "password": {
                    "type": "string",
                    "required": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#components/schemas/localauthuser"
                }
              }
            }
          }
        },
        "tags": [
          "auth local"
        ],
        "parameters": [],
        "security": {
          "roles": []
        }
      }
    },
    "/api/auth/local/validatepass": {
      "post": {
        "summary": "Validate password",
        "description": "Required scopes: <span>read:me</span><br/><br/>Checks that a password passes the required complexity specified in the application's configuration settings.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$schema": "https://json-schema.org/draft/2020-12/schema",
                "type": "object",
                "properties": {
                  "password": {
                    "type": "string",
                    "required": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$schema": "https://json-schema.org/draft/2020-12/schema",
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "auth local"
        ],
        "parameters": [],
        "security": {
          "roles": [
            "read:me"
          ]
        }
      }
    },
    "/api/auth/tokens": {
      "get": {
        "summary": "Retrieve all authentication tokens for current user",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "userId": {
                        "type": "string"
                      },
                      "createdAt": {
                        "type": "string"
                      },
                      "usedAt": {
                        "type": "string"
                      },
                      "authType": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "auth"
        ],
        "description": "Required scopes: <span>read:me</span>",
        "parameters": [],
        "security": {
          "roles": [
            "read:me"
          ]
        }
      }
    },
    "/api/config": {
      "get": {
        "summary": "Retrieve public config data",
        "responses": {
          "200": {
            "description": "The public config item data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "config"
        ],
        "description": "Route requires no authentication",
        "parameters": [],
        "security": {
          "roles": []
        }
      }
    },
    "/api/content": {
      "post": {
        "summary": "Insert a new content document",
        "parameters": [],
        "requestBody": {
          "description": "The content data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/content"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The content data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/content"
                }
              }
            }
          }
        },
        "tags": [
          "content"
        ],
        "description": "Required scopes: <span>write:content</span>",
        "security": {
          "roles": [
            "write:content"
          ]
        }
      },
      "get": {
        "summary": "Retrieve all content documents",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "How many results should be returned Default value is 100 (max value is 250)"
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page of results to return (determined from the limit value)"
          }
        ],
        "responses": {
          "200": {
            "description": "The content data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/content"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "content"
        ],
        "description": "Required scopes: <span>read:content</span>",
        "security": {
          "roles": [
            "read:content"
          ]
        }
      }
    },
    "/api/content/:_id": {
      "put": {
        "summary": "Replace an existing content document",
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true
          }
        ],
        "requestBody": {
          "description": "The content data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/content"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The content data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/content"
                }
              }
            }
          }
        },
        "tags": [
          "content"
        ],
        "description": "Required scopes: <span>write:content</span>",
        "security": {
          "roles": [
            "write:content"
          ]
        }
      },
      "get": {
        "summary": "Retrieve an existing content document",
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "description": "The content data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/content"
                }
              }
            }
          }
        },
        "tags": [
          "content"
        ],
        "description": "Required scopes: <span>read:content</span>",
        "security": {
          "roles": [
            "read:content"
          ]
        }
      },
      "patch": {
        "summary": "Update an existing content document",
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true
          }
        ],
        "requestBody": {
          "description": "The content data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/content"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The content data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/content"
                }
              }
            }
          }
        },
        "tags": [
          "content"
        ],
        "description": "Required scopes: <span>write:content</span>",
        "security": {
          "roles": [
            "write:content"
          ]
        }
      },
      "delete": {
        "summary": "Delete an existing content document",
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "The content data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/content"
                }
              }
            }
          }
        },
        "tags": [
          "content"
        ],
        "description": "Required scopes: <span>write:content</span>",
        "security": {
          "roles": [
            "write:content"
          ]
        }
      }
    },
    "/api/content/clone": {
      "post": {
        "summary": "Clones a content item",
        "description": "Required scopes: <span>write:content</span><br/><br/>Duplicates a content item as well as all its children.",
        "responses": {
          "201": {
            "description": "The newly cloned data",
            "content": {
              "application/json": {
                "schema": {
                  "$schema": "https://json-schema.org/draft/2020-12/schema",
                  "type": "array",
                  "items": {
                    "$ref": "#components/schemas/content"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "content"
        ],
        "parameters": [],
        "security": {
          "roles": [
            "write:content"
          ]
        }
      }
    },
    "/api/content/insertrecusive": {
      "post": {
        "summary": "Insert hierarchical content data",
        "description": "Required scopes: <span>write:content</span><br/><br/>Recursively inserts content data",
        "parameters": [
          {
            "name": "rootId",
            "in": "path",
            "description": "The parent content item _id",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#components/schemas/content"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The newly inserted data",
            "content": {
              "application/json": {
                "schema": {
                  "$schema": "https://json-schema.org/draft/2020-12/schema",
                  "type": "array",
                  "items": {
                    "$ref": "#components/schemas/content"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "content"
        ],
        "security": {
          "roles": [
            "write:content"
          ]
        }
      }
    },
    "/api/content/query": {
      "post": {
        "summary": "Query all content",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "How many results should be returned Default value is 100 (max value is 250)"
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page of results to return (determined from the limit value)"
          }
        ],
        "responses": {
          "200": {
            "description": "The content data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/content"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "content"
        ],
        "description": "Required scopes: <span>read:content</span>",
        "security": {
          "roles": [
            "read:content"
          ]
        }
      }
    },
    "/api/content/schema": {
      "get": {
        "summary": "Retrieve content schema",
        "parameters": [],
        "tags": [
          "content"
        ],
        "description": "Required scopes: <span>read:schema</span>",
        "security": {
          "roles": [
            "read:schema"
          ]
        }
      }
    },
    "/api/contentplugins": {
      "get": {
        "summary": "Retrieve all contentplugins documents",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "How many results should be returned Default value is 100 (max value is 250)"
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page of results to return (determined from the limit value)"
          }
        ],
        "responses": {
          "200": {
            "description": "The contentplugin data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/contentplugin"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "contentplugins"
        ],
        "description": "Required scopes: <span>read:contentplugins</span>",
        "security": {
          "roles": [
            "read:contentplugins"
          ]
        }
      }
    },
    "/api/contentplugins/:_id": {
      "get": {
        "summary": "Retrieve an existing contentplugin document",
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "description": "The contentplugin data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/contentplugin"
                }
              }
            }
          }
        },
        "tags": [
          "contentplugins"
        ],
        "description": "Required scopes: <span>read:contentplugins</span>",
        "security": {
          "roles": [
            "read:contentplugins"
          ]
        }
      },
      "patch": {
        "summary": "Update an existing contentplugin document",
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true
          }
        ],
        "requestBody": {
          "description": "The contentplugin data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/contentplugin"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The contentplugin data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/contentplugin"
                }
              }
            }
          }
        },
        "tags": [
          "contentplugins"
        ],
        "description": "Required scopes: <span>write:contentplugins</span>",
        "security": {
          "roles": [
            "write:contentplugins"
          ]
        }
      },
      "delete": {
        "summary": "Delete an existing contentplugin document",
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "The contentplugin data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/contentplugin"
                }
              }
            }
          }
        },
        "tags": [
          "contentplugins"
        ],
        "description": "Required scopes: <span>write:contentplugins</span>",
        "security": {
          "roles": [
            "write:contentplugins"
          ]
        }
      }
    },
    "/api/contentplugins/:_id/update": {
      "post": {
        "summary": "Update a single content plugin",
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true
          },
          {
            "name": "_id",
            "in": "path",
            "description": "Content plugin _id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#components/schemas/contentplugin"
                }
              }
            }
          }
        },
        "tags": [
          "contentplugins"
        ],
        "description": "Required scopes: <span>update:contentplugin</span>",
        "security": {
          "roles": [
            "update:contentplugin"
          ]
        }
      }
    },
    "/api/contentplugins/:_id/uses": {
      "get": {
        "summary": "Return courses using a single content plugin",
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true
          },
          {
            "name": "_id",
            "in": "path",
            "description": "Content plugin _id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#components/schemas/course"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "contentplugins"
        ],
        "description": "Required scopes: <span>read:contentplugin</span>",
        "security": {
          "roles": [
            "read:contentplugin"
          ]
        }
      }
    },
    "/api/contentplugins/install": {
      "post": {
        "summary": "Import an Adapt course",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$schema": "https://json-schema.org/draft/2020-12/schema",
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "version": {
                    "type": "string"
                  },
                  "force": {
                    "type": "Boolean",
                    "default": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#components/schemas/contentplugin"
                }
              }
            }
          }
        },
        "tags": [
          "contentplugins"
        ],
        "description": "Required scopes: <span>install:contentplugin</span>",
        "parameters": [],
        "security": {
          "roles": [
            "install:contentplugin"
          ]
        }
      }
    },
    "/api/contentplugins/query": {
      "post": {
        "summary": "Query all contentplugins",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "How many results should be returned Default value is 100 (max value is 250)"
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page of results to return (determined from the limit value)"
          }
        ],
        "responses": {
          "200": {
            "description": "The contentplugin data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/contentplugin"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "contentplugins"
        ],
        "description": "Required scopes: <span>read:contentplugins</span>",
        "security": {
          "roles": [
            "read:contentplugins"
          ]
        }
      }
    },
    "/api/contentplugins/schema": {
      "get": {
        "summary": "Retrieve contentplugin schema",
        "parameters": [],
        "tags": [
          "contentplugins"
        ],
        "description": "Required scopes: <span>read:schema</span>",
        "security": {
          "roles": [
            "read:schema"
          ]
        }
      }
    },
    "/api/coursethemepresets": {
      "post": {
        "summary": "Insert a new coursethemepreset document",
        "parameters": [],
        "requestBody": {
          "description": "The coursethemepreset data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/coursethemepreset"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The coursethemepreset data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/coursethemepreset"
                }
              }
            }
          }
        },
        "tags": [
          "coursethemepresets"
        ],
        "description": "Required scopes: <span>write:content</span>",
        "security": {
          "roles": [
            "write:content"
          ]
        }
      },
      "get": {
        "summary": "Retrieve all coursethemepresets documents",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "How many results should be returned Default value is 100 (max value is 250)"
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page of results to return (determined from the limit value)"
          }
        ],
        "responses": {
          "200": {
            "description": "The coursethemepreset data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/coursethemepreset"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "coursethemepresets"
        ],
        "description": "Required scopes: <span>read:content</span>",
        "security": {
          "roles": [
            "read:content"
          ]
        }
      }
    },
    "/api/coursethemepresets/:_id": {
      "put": {
        "summary": "Replace an existing coursethemepreset document",
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true
          }
        ],
        "requestBody": {
          "description": "The coursethemepreset data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/coursethemepreset"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The coursethemepreset data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/coursethemepreset"
                }
              }
            }
          }
        },
        "tags": [
          "coursethemepresets"
        ],
        "description": "Required scopes: <span>write:content</span>",
        "security": {
          "roles": [
            "write:content"
          ]
        }
      },
      "get": {
        "summary": "Retrieve an existing coursethemepreset document",
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "description": "The coursethemepreset data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/coursethemepreset"
                }
              }
            }
          }
        },
        "tags": [
          "coursethemepresets"
        ],
        "description": "Required scopes: <span>read:content</span>",
        "security": {
          "roles": [
            "read:content"
          ]
        }
      },
      "patch": {
        "summary": "Update an existing coursethemepreset document",
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true
          }
        ],
        "requestBody": {
          "description": "The coursethemepreset data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/coursethemepreset"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The coursethemepreset data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/coursethemepreset"
                }
              }
            }
          }
        },
        "tags": [
          "coursethemepresets"
        ],
        "description": "Required scopes: <span>write:content</span>",
        "security": {
          "roles": [
            "write:content"
          ]
        }
      },
      "delete": {
        "summary": "Delete an existing coursethemepreset document",
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "The coursethemepreset data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/coursethemepreset"
                }
              }
            }
          }
        },
        "tags": [
          "coursethemepresets"
        ],
        "description": "Required scopes: <span>write:content</span>",
        "security": {
          "roles": [
            "write:content"
          ]
        }
      }
    },
    "/api/coursethemepresets/:_id/apply/:courseId": {
      "post": {
        "summary": "Apply theme preset to a course",
        "responses": {
          "204": {}
        },
        "tags": [
          "coursethemepresets"
        ],
        "description": "Required scopes: <span>write:content</span>",
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true
          },
          {
            "name": "courseId",
            "in": "path",
            "required": true
          }
        ],
        "security": {
          "roles": [
            "write:content"
          ]
        }
      }
    },
    "/api/coursethemepresets/:_id/remove/:courseId": {
      "post": {
        "summary": "Remove theme preset from a course",
        "responses": {
          "204": {}
        },
        "tags": [
          "coursethemepresets"
        ],
        "description": "Required scopes: <span>write:content</span>",
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true
          },
          {
            "name": "courseId",
            "in": "path",
            "required": true
          }
        ],
        "security": {
          "roles": [
            "write:content"
          ]
        }
      }
    },
    "/api/coursethemepresets/query": {
      "post": {
        "summary": "Query all coursethemepresets",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "How many results should be returned Default value is 100 (max value is 250)"
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page of results to return (determined from the limit value)"
          }
        ],
        "responses": {
          "200": {
            "description": "The coursethemepreset data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/coursethemepreset"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "coursethemepresets"
        ],
        "description": "Required scopes: <span>read:content</span>",
        "security": {
          "roles": [
            "read:content"
          ]
        }
      }
    },
    "/api/coursethemepresets/schema": {
      "get": {
        "summary": "Retrieve coursethemepreset schema",
        "parameters": [],
        "tags": [
          "coursethemepresets"
        ],
        "description": "Required scopes: <span>read:schema</span>",
        "security": {
          "roles": [
            "read:schema"
          ]
        }
      }
    },
    "/api/lang/:lang?": {
      "get": {
        "summary": "Retrieve lang strings for single locale",
        "responses": {
          "200": {
            "description": "Lang strings for the specified locale",
            "content": {
              "application/json": {}
            }
          }
        },
        "tags": [
          "lang"
        ],
        "description": "Route requires no authentication",
        "parameters": [
          {
            "name": "lang",
            "in": "path",
            "required": false
          }
        ],
        "security": {
          "roles": []
        }
      }
    },
    "/api/logs": {
      "get": {
        "summary": "Retrieve all logs documents",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "How many results should be returned Default value is 100 (max value is 250)"
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page of results to return (determined from the limit value)"
          }
        ],
        "responses": {
          "200": {
            "description": "The log data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/log"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "logs"
        ],
        "description": "Required scopes: <span>read:logs</span>",
        "security": {
          "roles": [
            "read:logs"
          ]
        }
      }
    },
    "/api/logs/:_id": {
      "get": {
        "summary": "Retrieve an existing log document",
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "description": "The log data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/log"
                }
              }
            }
          }
        },
        "tags": [
          "logs"
        ],
        "description": "Required scopes: <span>read:logs</span>",
        "security": {
          "roles": [
            "read:logs"
          ]
        }
      }
    },
    "/api/logs/query": {
      "post": {
        "summary": "Query all logs",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "How many results should be returned Default value is 100 (max value is 250)"
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page of results to return (determined from the limit value)"
          }
        ],
        "responses": {
          "200": {
            "description": "The log data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/log"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "logs"
        ],
        "description": "Required scopes: <span>read:logs</span>",
        "security": {
          "roles": [
            "read:logs"
          ]
        }
      }
    },
    "/api/mailer/test": {
      "post": {
        "summary": "Send test email",
        "responses": {
          "200": {}
        },
        "tags": [
          "mailer"
        ],
        "description": "ROUTE IS ONLY ACCESSIBLE FROM LOCALHOST.<br/><br/>Route requires no authentication",
        "parameters": [],
        "security": {
          "roles": []
        }
      }
    },
    "/api/roles": {
      "post": {
        "summary": "Insert a new role document",
        "parameters": [],
        "requestBody": {
          "description": "The role data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/role"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The role data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/role"
                }
              }
            }
          }
        },
        "tags": [
          "roles"
        ],
        "description": "Required scopes: <span>write:roles</span>",
        "security": {
          "roles": [
            "write:roles"
          ]
        }
      },
      "get": {
        "summary": "Retrieve all roles documents",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "How many results should be returned Default value is 100 (max value is 250)"
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page of results to return (determined from the limit value)"
          }
        ],
        "responses": {
          "200": {
            "description": "The role data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/role"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "roles"
        ],
        "description": "Required scopes: <span>read:roles</span>",
        "security": {
          "roles": [
            "read:roles"
          ]
        }
      }
    },
    "/api/roles/:_id": {
      "put": {
        "summary": "Replace an existing role document",
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true
          }
        ],
        "requestBody": {
          "description": "The role data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/role"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The role data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/role"
                }
              }
            }
          }
        },
        "tags": [
          "roles"
        ],
        "description": "Required scopes: <span>write:roles</span>",
        "security": {
          "roles": [
            "write:roles"
          ]
        }
      },
      "get": {
        "summary": "Retrieve an existing role document",
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "description": "The role data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/role"
                }
              }
            }
          }
        },
        "tags": [
          "roles"
        ],
        "description": "Required scopes: <span>read:roles</span>",
        "security": {
          "roles": [
            "read:roles"
          ]
        }
      },
      "patch": {
        "summary": "Update an existing role document",
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true
          }
        ],
        "requestBody": {
          "description": "The role data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/role"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The role data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/role"
                }
              }
            }
          }
        },
        "tags": [
          "roles"
        ],
        "description": "Required scopes: <span>write:roles</span>",
        "security": {
          "roles": [
            "write:roles"
          ]
        }
      },
      "delete": {
        "summary": "Delete an existing role document",
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "The role data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/role"
                }
              }
            }
          }
        },
        "tags": [
          "roles"
        ],
        "description": "Required scopes: <span>write:roles</span>",
        "security": {
          "roles": [
            "write:roles"
          ]
        }
      }
    },
    "/api/roles/query": {
      "post": {
        "summary": "Query all roles",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "How many results should be returned Default value is 100 (max value is 250)"
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page of results to return (determined from the limit value)"
          }
        ],
        "responses": {
          "200": {
            "description": "The role data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/role"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "roles"
        ],
        "description": "Required scopes: <span>read:roles</span>",
        "security": {
          "roles": [
            "read:roles"
          ]
        }
      }
    },
    "/api/roles/schema": {
      "get": {
        "summary": "Retrieve role schema",
        "parameters": [],
        "tags": [
          "roles"
        ],
        "description": "Required scopes: <span>read:schema</span>",
        "security": {
          "roles": [
            "read:schema"
          ]
        }
      }
    },
    "/api/schema/:schemaName": {
      "get": {
        "tags": [
          "schema"
        ],
        "description": "Required scopes: <span>debug</span>",
        "parameters": [
          {
            "name": "schemaName",
            "in": "path",
            "required": true
          }
        ],
        "security": {
          "roles": [
            "debug"
          ]
        }
      }
    },
    "/api/schema/list": {
      "get": {
        "tags": [
          "schema"
        ],
        "description": "Required scopes: <span>debug</span>",
        "parameters": [],
        "security": {
          "roles": [
            "debug"
          ]
        }
      }
    },
    "/api/spoortracking/reset/:_courseId": {
      "post": {
        "summary": "Reset course tracking IDs",
        "description": "Required scopes: <span>write:content</span><br/><br/>Fully resets all tracking IDs for a single course.",
        "responses": {
          "204": {}
        },
        "tags": [
          "spoortracking"
        ],
        "parameters": [
          {
            "name": "_courseId",
            "in": "path",
            "required": true
          }
        ],
        "security": {
          "roles": [
            "write:content"
          ]
        }
      }
    },
    "/api/tags": {
      "post": {
        "summary": "Insert a new tag document",
        "parameters": [],
        "requestBody": {
          "description": "The tag data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tag"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The tag data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          }
        },
        "tags": [
          "tags"
        ],
        "description": "Required scopes: <span>write:tags</span>",
        "security": {
          "roles": [
            "write:tags"
          ]
        }
      },
      "get": {
        "summary": "Retrieve all tags documents",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "How many results should be returned Default value is 100 (max value is 250)"
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page of results to return (determined from the limit value)"
          }
        ],
        "responses": {
          "200": {
            "description": "The tag data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/tag"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "tags"
        ],
        "description": "Required scopes: <span>read:tags</span>",
        "security": {
          "roles": [
            "read:tags"
          ]
        }
      }
    },
    "/api/tags/:_id": {
      "put": {
        "summary": "Replace an existing tag document",
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true
          }
        ],
        "requestBody": {
          "description": "The tag data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tag"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The tag data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          }
        },
        "tags": [
          "tags"
        ],
        "description": "Required scopes: <span>write:tags</span>",
        "security": {
          "roles": [
            "write:tags"
          ]
        }
      },
      "get": {
        "summary": "Retrieve an existing tag document",
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "description": "The tag data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          }
        },
        "tags": [
          "tags"
        ],
        "description": "Required scopes: <span>read:tags</span>",
        "security": {
          "roles": [
            "read:tags"
          ]
        }
      },
      "patch": {
        "summary": "Update an existing tag document",
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true
          }
        ],
        "requestBody": {
          "description": "The tag data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tag"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The tag data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          }
        },
        "tags": [
          "tags"
        ],
        "description": "Required scopes: <span>write:tags</span>",
        "security": {
          "roles": [
            "write:tags"
          ]
        }
      },
      "delete": {
        "summary": "Delete an existing tag document",
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "The tag data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          }
        },
        "tags": [
          "tags"
        ],
        "description": "Required scopes: <span>write:tags</span>",
        "security": {
          "roles": [
            "write:tags"
          ]
        }
      }
    },
    "/api/tags/autocomplete": {
      "get": {
        "summary": "Retrieve tags for UI autocomplete",
        "description": "Required scopes: <span>read:content</span><br/><br/>A streamlined query API to allow searching of tag data.",
        "parameters": [
          {
            "name": "term",
            "in": "query",
            "description": "Search term",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "_id": {
                        "type": "string"
                      },
                      "title": {
                        "type": "string"
                      },
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "tags"
        ],
        "security": {
          "roles": [
            "read:content"
          ]
        }
      }
    },
    "/api/tags/query": {
      "post": {
        "summary": "Query all tags",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "How many results should be returned Default value is 100 (max value is 250)"
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page of results to return (determined from the limit value)"
          }
        ],
        "responses": {
          "200": {
            "description": "The tag data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/tag"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "tags"
        ],
        "description": "Required scopes: <span>read:tags</span>",
        "security": {
          "roles": [
            "read:tags"
          ]
        }
      }
    },
    "/api/tags/schema": {
      "get": {
        "summary": "Retrieve tag schema",
        "parameters": [],
        "tags": [
          "tags"
        ],
        "description": "Required scopes: <span>read:schema</span>",
        "security": {
          "roles": [
            "read:schema"
          ]
        }
      }
    },
    "/api/users": {
      "get": {
        "summary": "Retrieve all users documents",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "How many results should be returned Default value is 100 (max value is 250)"
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page of results to return (determined from the limit value)"
          }
        ],
        "responses": {
          "200": {
            "description": "The user data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/user"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "users"
        ],
        "description": "Required scopes: <span>read:users</span>",
        "security": {
          "roles": [
            "read:users"
          ]
        }
      }
    },
    "/api/users/:_id": {
      "put": {
        "summary": "Replace an existing user document",
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true
          }
        ],
        "requestBody": {
          "description": "The user data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/user"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The user data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          }
        },
        "tags": [
          "users"
        ],
        "description": "Required scopes: <span>write:users</span>",
        "security": {
          "roles": [
            "write:users"
          ]
        }
      },
      "get": {
        "summary": "Retrieve an existing user document",
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "description": "The user data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          }
        },
        "tags": [
          "users"
        ],
        "description": "Required scopes: <span>read:users</span>",
        "security": {
          "roles": [
            "read:users"
          ]
        }
      },
      "patch": {
        "summary": "Update an existing user document",
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true
          }
        ],
        "requestBody": {
          "description": "The user data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/user"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The user data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          }
        },
        "tags": [
          "users"
        ],
        "description": "Required scopes: <span>write:users</span>",
        "security": {
          "roles": [
            "write:users"
          ]
        }
      },
      "delete": {
        "summary": "Delete an existing user document",
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "The user data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          }
        },
        "tags": [
          "users"
        ],
        "description": "Required scopes: <span>write:users</span>",
        "security": {
          "roles": [
            "write:users"
          ]
        }
      }
    },
    "/api/users/me": {
      "get": {
        "summary": "Retrieve your own user data",
        "description": "Required scopes: <span>read:me</span><br/><br/>This endpoint is shorthand for `GET` `/api/users/:_id`, see the documentation for that endpoint for more details",
        "tags": [
          "users"
        ],
        "parameters": [],
        "security": {
          "roles": [
            "read:me"
          ]
        }
      },
      "put": {
        "summary": "Replace your own user data",
        "description": "Required scopes: <span>write:me</span><br/><br/>This endpoint is shorthand for `PUT` `/api/users/:_id`, see the documentation for that endpoint for more details",
        "tags": [
          "users"
        ],
        "parameters": [],
        "security": {
          "roles": [
            "write:me"
          ]
        }
      },
      "patch": {
        "summary": "Update your own user data",
        "description": "Required scopes: <span>write:me</span><br/><br/>This endpoint is shorthand for `PATCH` `/api/users/:_id`, see the documentation for that endpoint for more details",
        "tags": [
          "users"
        ],
        "parameters": [],
        "security": {
          "roles": [
            "write:me"
          ]
        }
      }
    },
    "/api/users/query": {
      "post": {
        "summary": "Query all users",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "How many results should be returned Default value is 100 (max value is 250)"
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page of results to return (determined from the limit value)"
          }
        ],
        "responses": {
          "200": {
            "description": "The user data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/user"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "users"
        ],
        "description": "Required scopes: <span>read:users</span>",
        "security": {
          "roles": [
            "read:users"
          ]
        }
      }
    },
    "/api/users/schema": {
      "get": {
        "summary": "Retrieve user schema",
        "parameters": [],
        "tags": [
          "users"
        ],
        "description": "Required scopes: <span>read:schema</span>",
        "security": {
          "roles": [
            "read:schema"
          ]
        }
      }
    },
    "/api/ws/data": {
      "get": {
        "tags": [
          "ws"
        ],
        "description": "Required scopes: <span>read:config</span>",
        "parameters": [],
        "security": {
          "roles": [
            "read:config"
          ]
        }
      }
    }
  }
}